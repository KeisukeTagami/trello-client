{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Member
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Member where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Member

-- *** addMembersAvatarByIdMember

-- | @POST \/members\/{idMember}\/avatar@
-- 
-- addMembersAvatarByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersAvatarByIdMember 
  :: (Consumes AddMembersAvatarByIdMember contentType, MimeRender contentType MembersAvatar)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersAvatar -- ^ "body" -  Attributes of \"Members Avatar\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersAvatarByIdMember contentType NoContent MimeNoContent
addMembersAvatarByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersAvatarByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Avatar\" to be added.
instance HasBodyParam AddMembersAvatarByIdMember MembersAvatar 

-- *** addMembersBoardBackgroundsByIdMember

-- | @POST \/members\/{idMember}\/boardBackgrounds@
-- 
-- addMembersBoardBackgroundsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersBoardBackgroundsByIdMember 
  :: (Consumes AddMembersBoardBackgroundsByIdMember contentType, MimeRender contentType MembersBoardBackgrounds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersBoardBackgrounds -- ^ "body" -  Attributes of \"Members Board Backgrounds\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersBoardBackgroundsByIdMember contentType NoContent MimeNoContent
addMembersBoardBackgroundsByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/boardBackgrounds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersBoardBackgroundsByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Board Backgrounds\" to be added.
instance HasBodyParam AddMembersBoardBackgroundsByIdMember MembersBoardBackgrounds 

-- *** addMembersBoardStarsByIdMember

-- | @POST \/members\/{idMember}\/boardStars@
-- 
-- addMembersBoardStarsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersBoardStarsByIdMember 
  :: (Consumes AddMembersBoardStarsByIdMember contentType, MimeRender contentType MembersBoardStars)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersBoardStars -- ^ "body" -  Attributes of \"Members Board Stars\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersBoardStarsByIdMember contentType NoContent MimeNoContent
addMembersBoardStarsByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/boardStars"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersBoardStarsByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Board Stars\" to be added.
instance HasBodyParam AddMembersBoardStarsByIdMember MembersBoardStars 

-- *** addMembersCustomBoardBackgroundsByIdMember

-- | @POST \/members\/{idMember}\/customBoardBackgrounds@
-- 
-- addMembersCustomBoardBackgroundsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersCustomBoardBackgroundsByIdMember 
  :: (Consumes AddMembersCustomBoardBackgroundsByIdMember contentType, MimeRender contentType MembersCustomBoardBackgrounds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersCustomBoardBackgrounds -- ^ "body" -  Attributes of \"Members Custom Board Backgrounds\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersCustomBoardBackgroundsByIdMember contentType NoContent MimeNoContent
addMembersCustomBoardBackgroundsByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/customBoardBackgrounds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersCustomBoardBackgroundsByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Custom Board Backgrounds\" to be added.
instance HasBodyParam AddMembersCustomBoardBackgroundsByIdMember MembersCustomBoardBackgrounds 

-- *** addMembersCustomEmojiByIdMember

-- | @POST \/members\/{idMember}\/customEmoji@
-- 
-- addMembersCustomEmojiByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersCustomEmojiByIdMember 
  :: (Consumes AddMembersCustomEmojiByIdMember contentType, MimeRender contentType MembersCustomEmoji)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersCustomEmoji -- ^ "body" -  Attributes of \"Members Custom Emoji\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersCustomEmojiByIdMember contentType NoContent MimeNoContent
addMembersCustomEmojiByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/customEmoji"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersCustomEmojiByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Custom Emoji\" to be added.
instance HasBodyParam AddMembersCustomEmojiByIdMember MembersCustomEmoji 

-- *** addMembersCustomStickersByIdMember

-- | @POST \/members\/{idMember}\/customStickers@
-- 
-- addMembersCustomStickersByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersCustomStickersByIdMember 
  :: (Consumes AddMembersCustomStickersByIdMember contentType, MimeRender contentType MembersCustomStickers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersCustomStickers -- ^ "body" -  Attributes of \"Members Custom Stickers\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersCustomStickersByIdMember contentType NoContent MimeNoContent
addMembersCustomStickersByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/customStickers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersCustomStickersByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Custom Stickers\" to be added.
instance HasBodyParam AddMembersCustomStickersByIdMember MembersCustomStickers 

-- *** addMembersOneTimeMessagesDismissedByIdMember

-- | @POST \/members\/{idMember}\/oneTimeMessagesDismissed@
-- 
-- addMembersOneTimeMessagesDismissedByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersOneTimeMessagesDismissedByIdMember 
  :: (Consumes AddMembersOneTimeMessagesDismissedByIdMember contentType, MimeRender contentType MembersOneTimeMessagesDismissed)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersOneTimeMessagesDismissed -- ^ "body" -  Attributes of \"Members One Time Messages Dismissed\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersOneTimeMessagesDismissedByIdMember contentType NoContent MimeNoContent
addMembersOneTimeMessagesDismissedByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/oneTimeMessagesDismissed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersOneTimeMessagesDismissedByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members One Time Messages Dismissed\" to be added.
instance HasBodyParam AddMembersOneTimeMessagesDismissedByIdMember MembersOneTimeMessagesDismissed 

-- *** addMembersSavedSearchesByIdMember

-- | @POST \/members\/{idMember}\/savedSearches@
-- 
-- addMembersSavedSearchesByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addMembersSavedSearchesByIdMember 
  :: (Consumes AddMembersSavedSearchesByIdMember contentType, MimeRender contentType MembersSavedSearches)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersSavedSearches -- ^ "body" -  Attributes of \"Members Saved Searches\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddMembersSavedSearchesByIdMember contentType NoContent MimeNoContent
addMembersSavedSearchesByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "POST" ["/members/",toPath idMember,"/savedSearches"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddMembersSavedSearchesByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Saved Searches\" to be added.
instance HasBodyParam AddMembersSavedSearchesByIdMember MembersSavedSearches 

-- *** deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground

-- | @DELETE \/members\/{idMember}\/boardBackgrounds\/{idBoardBackground}@
-- 
-- deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardBackground -- ^ "idBoardBackground" -  idBoardBackground
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteMembersBoardBackgroundsByIdMemberByIdBoardBackground MimeNoContent NoContent MimeNoContent
deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground (IdMember idMember) (IdBoardBackground idBoardBackground) (Key key) (Token token) =
  _mkRequest "DELETE" ["/members/",toPath idMember,"/boardBackgrounds/",toPath idBoardBackground]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteMembersBoardBackgroundsByIdMemberByIdBoardBackground  

-- *** deleteMembersBoardStarsByIdMemberByIdBoardStar

-- | @DELETE \/members\/{idMember}\/boardStars\/{idBoardStar}@
-- 
-- deleteMembersBoardStarsByIdMemberByIdBoardStar()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteMembersBoardStarsByIdMemberByIdBoardStar 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardStar -- ^ "idBoardStar" -  idBoardStar
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteMembersBoardStarsByIdMemberByIdBoardStar MimeNoContent NoContent MimeNoContent
deleteMembersBoardStarsByIdMemberByIdBoardStar (IdMember idMember) (IdBoardStar idBoardStar) (Key key) (Token token) =
  _mkRequest "DELETE" ["/members/",toPath idMember,"/boardStars/",toPath idBoardStar]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteMembersBoardStarsByIdMemberByIdBoardStar  

-- *** deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground

-- | @DELETE \/members\/{idMember}\/customBoardBackgrounds\/{idBoardBackground}@
-- 
-- deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardBackground -- ^ "idBoardBackground" -  idBoardBackground
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground MimeNoContent NoContent MimeNoContent
deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground (IdMember idMember) (IdBoardBackground idBoardBackground) (Key key) (Token token) =
  _mkRequest "DELETE" ["/members/",toPath idMember,"/customBoardBackgrounds/",toPath idBoardBackground]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground  

-- *** deleteMembersCustomStickersByIdMemberByIdCustomSticker

-- | @DELETE \/members\/{idMember}\/customStickers\/{idCustomSticker}@
-- 
-- deleteMembersCustomStickersByIdMemberByIdCustomSticker()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteMembersCustomStickersByIdMemberByIdCustomSticker 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdCustomSticker -- ^ "idCustomSticker" -  idCustomSticker
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteMembersCustomStickersByIdMemberByIdCustomSticker MimeNoContent NoContent MimeNoContent
deleteMembersCustomStickersByIdMemberByIdCustomSticker (IdMember idMember) (IdCustomSticker idCustomSticker) (Key key) (Token token) =
  _mkRequest "DELETE" ["/members/",toPath idMember,"/customStickers/",toPath idCustomSticker]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteMembersCustomStickersByIdMemberByIdCustomSticker  

-- *** deleteMembersSavedSearchesByIdMemberByIdSavedSearch

-- | @DELETE \/members\/{idMember}\/savedSearches\/{idSavedSearch}@
-- 
-- deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteMembersSavedSearchesByIdMemberByIdSavedSearch 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdSavedSearch -- ^ "idSavedSearch" -  idSavedSearch
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteMembersSavedSearchesByIdMemberByIdSavedSearch MimeNoContent NoContent MimeNoContent
deleteMembersSavedSearchesByIdMemberByIdSavedSearch (IdMember idMember) (IdSavedSearch idSavedSearch) (Key key) (Token token) =
  _mkRequest "DELETE" ["/members/",toPath idMember,"/savedSearches/",toPath idSavedSearch]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteMembersSavedSearchesByIdMemberByIdSavedSearch  

-- *** getMembersActionsByIdMember

-- | @GET \/members\/{idMember}\/actions@
-- 
-- getMembersActionsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersActionsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersActionsByIdMember MimeNoContent NoContent MimeNoContent
getMembersActionsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/actions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersActionsByIdMember  

-- | /Optional Param/ "entities" -  true or false
instance HasOptionalParam GetMembersActionsByIdMember Entities where
  applyOptionalParam req (Entities xs) =
    req `setQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "display" -  true or false
instance HasOptionalParam GetMembersActionsByIdMember Display where
  applyOptionalParam req (Display xs) =
    req `setQuery` toQuery ("display", Just xs)

-- | /Optional Param/ "filter" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetMembersActionsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetMembersActionsByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "limit" - a number from 0 to 1000
instance HasOptionalParam GetMembersActionsByIdMember Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "format" - One of: count, list or minimal
instance HasOptionalParam GetMembersActionsByIdMember Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "since" - A date, null or lastView
instance HasOptionalParam GetMembersActionsByIdMember Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "before" - A date, or null
instance HasOptionalParam GetMembersActionsByIdMember Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "page" - Page * limit must be less than 1000
instance HasOptionalParam GetMembersActionsByIdMember Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "idModels" - Only return actions related to these model ids
instance HasOptionalParam GetMembersActionsByIdMember IdModels where
  applyOptionalParam req (IdModels xs) =
    req `setQuery` toQuery ("idModels", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetMembersActionsByIdMember Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetMembersActionsByIdMember MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "memberCreator" -  true or false
instance HasOptionalParam GetMembersActionsByIdMember MemberCreator where
  applyOptionalParam req (MemberCreator xs) =
    req `setQuery` toQuery ("memberCreator", Just xs)

-- | /Optional Param/ "memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetMembersActionsByIdMember MemberCreatorFields where
  applyOptionalParam req (MemberCreatorFields xs) =
    req `setQuery` toQuery ("memberCreator_fields", Just xs)

-- *** getMembersBoardBackgroundsByIdMember

-- | @GET \/members\/{idMember}\/boardBackgrounds@
-- 
-- getMembersBoardBackgroundsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardBackgroundsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardBackgroundsByIdMember MimeNoContent NoContent MimeNoContent
getMembersBoardBackgroundsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boardBackgrounds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardBackgroundsByIdMember  

-- | /Optional Param/ "filter" - One of: all, custom, default, none or premium
instance HasOptionalParam GetMembersBoardBackgroundsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** getMembersBoardBackgroundsByIdMemberByIdBoardBackground

-- | @GET \/members\/{idMember}\/boardBackgrounds\/{idBoardBackground}@
-- 
-- getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardBackgroundsByIdMemberByIdBoardBackground 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardBackground -- ^ "idBoardBackground" -  idBoardBackground
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardBackgroundsByIdMemberByIdBoardBackground MimeNoContent NoContent MimeNoContent
getMembersBoardBackgroundsByIdMemberByIdBoardBackground (IdMember idMember) (IdBoardBackground idBoardBackground) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boardBackgrounds/",toPath idBoardBackground]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardBackgroundsByIdMemberByIdBoardBackground  

-- | /Optional Param/ "fields" - all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
instance HasOptionalParam GetMembersBoardBackgroundsByIdMemberByIdBoardBackground Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersBoardStarsByIdMember

-- | @GET \/members\/{idMember}\/boardStars@
-- 
-- getMembersBoardStarsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardStarsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardStarsByIdMember MimeNoContent NoContent MimeNoContent
getMembersBoardStarsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boardStars"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardStarsByIdMember  

-- *** getMembersBoardStarsByIdMemberByIdBoardStar

-- | @GET \/members\/{idMember}\/boardStars\/{idBoardStar}@
-- 
-- getMembersBoardStarsByIdMemberByIdBoardStar()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardStarsByIdMemberByIdBoardStar 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardStar -- ^ "idBoardStar" -  idBoardStar
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardStarsByIdMemberByIdBoardStar MimeNoContent NoContent MimeNoContent
getMembersBoardStarsByIdMemberByIdBoardStar (IdMember idMember) (IdBoardStar idBoardStar) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boardStars/",toPath idBoardStar]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardStarsByIdMemberByIdBoardStar  

-- *** getMembersBoardsByIdMember

-- | @GET \/members\/{idMember}\/boards@
-- 
-- getMembersBoardsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardsByIdMember MimeNoContent NoContent MimeNoContent
getMembersBoardsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardsByIdMember  

-- | /Optional Param/ "filter" - all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
instance HasOptionalParam GetMembersBoardsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetMembersBoardsByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetMembersBoardsByIdMember Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetMembersBoardsByIdMember ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetMembersBoardsByIdMember ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "actions_format" - One of: count, list or minimal
instance HasOptionalParam GetMembersBoardsByIdMember ActionsFormat where
  applyOptionalParam req (ActionsFormat xs) =
    req `setQuery` toQuery ("actions_format", Just xs)

-- | /Optional Param/ "actions_since" - A date, null or lastView
instance HasOptionalParam GetMembersBoardsByIdMember ActionsSince where
  applyOptionalParam req (ActionsSince xs) =
    req `setQuery` toQuery ("actions_since", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetMembersBoardsByIdMember ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "memberships" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetMembersBoardsByIdMember Memberships where
  applyOptionalParam req (Memberships xs) =
    req `setQuery` toQuery ("memberships", Just xs)

-- | /Optional Param/ "organization" -  true or false
instance HasOptionalParam GetMembersBoardsByIdMember Organization where
  applyOptionalParam req (Organization xs) =
    req `setQuery` toQuery ("organization", Just xs)

-- | /Optional Param/ "organization_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetMembersBoardsByIdMember OrganizationFields where
  applyOptionalParam req (OrganizationFields xs) =
    req `setQuery` toQuery ("organization_fields", Just xs)

-- | /Optional Param/ "lists" - One of: all, closed, none or open
instance HasOptionalParam GetMembersBoardsByIdMember Lists2 where
  applyOptionalParam req (Lists2 xs) =
    req `setQuery` toQuery ("lists", Just xs)

-- *** getMembersBoardsByIdMemberByFilter

-- | @GET \/members\/{idMember}\/boards\/{filter}@
-- 
-- getMembersBoardsByIdMemberByFilter()
-- 
getMembersBoardsByIdMemberByFilter 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardsByIdMemberByFilter MimeNoContent NoContent MimeNoContent
getMembersBoardsByIdMemberByFilter (IdMember idMember) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boards/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardsByIdMemberByFilter  

-- *** getMembersBoardsInvitedByIdMember

-- | @GET \/members\/{idMember}\/boardsInvited@
-- 
-- getMembersBoardsInvitedByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardsInvitedByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardsInvitedByIdMember MimeNoContent NoContent MimeNoContent
getMembersBoardsInvitedByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boardsInvited"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardsInvitedByIdMember  

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetMembersBoardsInvitedByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersBoardsInvitedByIdMemberByField

-- | @GET \/members\/{idMember}\/boardsInvited\/{field}@
-- 
-- getMembersBoardsInvitedByIdMemberByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersBoardsInvitedByIdMemberByField 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersBoardsInvitedByIdMemberByField MimeNoContent NoContent MimeNoContent
getMembersBoardsInvitedByIdMemberByField (IdMember idMember) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/boardsInvited/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersBoardsInvitedByIdMemberByField  

-- *** getMembersByIdMember

-- | @GET \/members\/{idMember}@
-- 
-- getMembersByIdMember()
-- 
-- If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersByIdMember MimeNoContent NoContent MimeNoContent
getMembersByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersByIdMember  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetMembersByIdMember Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetMembersByIdMember ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_display" -  true or false
instance HasOptionalParam GetMembersByIdMember ActionsDisplay where
  applyOptionalParam req (ActionsDisplay xs) =
    req `setQuery` toQuery ("actions_display", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetMembersByIdMember ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetMembersByIdMember ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "action_since" - A date, null or lastView
instance HasOptionalParam GetMembersByIdMember ActionSince where
  applyOptionalParam req (ActionSince xs) =
    req `setQuery` toQuery ("action_since", Just xs)

-- | /Optional Param/ "action_before" - A date, or null
instance HasOptionalParam GetMembersByIdMember ActionBefore where
  applyOptionalParam req (ActionBefore xs) =
    req `setQuery` toQuery ("action_before", Just xs)

-- | /Optional Param/ "cards" - One of: all, closed, none, open or visible
instance HasOptionalParam GetMembersByIdMember Cards2 where
  applyOptionalParam req (Cards2 xs) =
    req `setQuery` toQuery ("cards", Just xs)

-- | /Optional Param/ "card_fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetMembersByIdMember CardFields where
  applyOptionalParam req (CardFields xs) =
    req `setQuery` toQuery ("card_fields", Just xs)

-- | /Optional Param/ "card_members" -  true or false
instance HasOptionalParam GetMembersByIdMember CardMembers where
  applyOptionalParam req (CardMembers xs) =
    req `setQuery` toQuery ("card_members", Just xs)

-- | /Optional Param/ "card_member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetMembersByIdMember CardMemberFields where
  applyOptionalParam req (CardMemberFields xs) =
    req `setQuery` toQuery ("card_member_fields", Just xs)

-- | /Optional Param/ "card_attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetMembersByIdMember CardAttachments where
  applyOptionalParam req (CardAttachments xs) =
    req `setQuery` toQuery ("card_attachments", Just xs)

-- | /Optional Param/ "card_attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetMembersByIdMember CardAttachmentFields where
  applyOptionalParam req (CardAttachmentFields xs) =
    req `setQuery` toQuery ("card_attachment_fields", Just xs)

-- | /Optional Param/ "card_stickers" -  true or false
instance HasOptionalParam GetMembersByIdMember CardStickers where
  applyOptionalParam req (CardStickers xs) =
    req `setQuery` toQuery ("card_stickers", Just xs)

-- | /Optional Param/ "boards" - all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
instance HasOptionalParam GetMembersByIdMember Boards2 where
  applyOptionalParam req (Boards2 xs) =
    req `setQuery` toQuery ("boards", Just xs)

-- | /Optional Param/ "board_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetMembersByIdMember BoardFields where
  applyOptionalParam req (BoardFields xs) =
    req `setQuery` toQuery ("board_fields", Just xs)

-- | /Optional Param/ "board_actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetMembersByIdMember BoardActions where
  applyOptionalParam req (BoardActions xs) =
    req `setQuery` toQuery ("board_actions", Just xs)

-- | /Optional Param/ "board_actions_entities" -  true or false
instance HasOptionalParam GetMembersByIdMember BoardActionsEntities where
  applyOptionalParam req (BoardActionsEntities xs) =
    req `setQuery` toQuery ("board_actions_entities", Just xs)

-- | /Optional Param/ "board_actions_display" -  true or false
instance HasOptionalParam GetMembersByIdMember BoardActionsDisplay where
  applyOptionalParam req (BoardActionsDisplay xs) =
    req `setQuery` toQuery ("board_actions_display", Just xs)

-- | /Optional Param/ "board_actions_format" - One of: count, list or minimal
instance HasOptionalParam GetMembersByIdMember BoardActionsFormat where
  applyOptionalParam req (BoardActionsFormat xs) =
    req `setQuery` toQuery ("board_actions_format", Just xs)

-- | /Optional Param/ "board_actions_since" - A date, null or lastView
instance HasOptionalParam GetMembersByIdMember BoardActionsSince where
  applyOptionalParam req (BoardActionsSince xs) =
    req `setQuery` toQuery ("board_actions_since", Just xs)

-- | /Optional Param/ "board_actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetMembersByIdMember BoardActionsLimit where
  applyOptionalParam req (BoardActionsLimit xs) =
    req `setQuery` toQuery ("board_actions_limit", Just xs)

-- | /Optional Param/ "board_action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetMembersByIdMember BoardActionFields where
  applyOptionalParam req (BoardActionFields xs) =
    req `setQuery` toQuery ("board_action_fields", Just xs)

-- | /Optional Param/ "board_lists" - One of: all, closed, none or open
instance HasOptionalParam GetMembersByIdMember BoardLists where
  applyOptionalParam req (BoardLists xs) =
    req `setQuery` toQuery ("board_lists", Just xs)

-- | /Optional Param/ "board_memberships" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetMembersByIdMember BoardMemberships where
  applyOptionalParam req (BoardMemberships xs) =
    req `setQuery` toQuery ("board_memberships", Just xs)

-- | /Optional Param/ "board_organization" -  true or false
instance HasOptionalParam GetMembersByIdMember BoardOrganization where
  applyOptionalParam req (BoardOrganization xs) =
    req `setQuery` toQuery ("board_organization", Just xs)

-- | /Optional Param/ "board_organization_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetMembersByIdMember BoardOrganizationFields where
  applyOptionalParam req (BoardOrganizationFields xs) =
    req `setQuery` toQuery ("board_organization_fields", Just xs)

-- | /Optional Param/ "boardsInvited" - all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
instance HasOptionalParam GetMembersByIdMember BoardsInvited where
  applyOptionalParam req (BoardsInvited xs) =
    req `setQuery` toQuery ("boardsInvited", Just xs)

-- | /Optional Param/ "boardsInvited_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetMembersByIdMember BoardsInvitedFields where
  applyOptionalParam req (BoardsInvitedFields xs) =
    req `setQuery` toQuery ("boardsInvited_fields", Just xs)

-- | /Optional Param/ "boardStars" -  true or false
instance HasOptionalParam GetMembersByIdMember BoardStars where
  applyOptionalParam req (BoardStars xs) =
    req `setQuery` toQuery ("boardStars", Just xs)

-- | /Optional Param/ "savedSearches" -  true or false
instance HasOptionalParam GetMembersByIdMember SavedSearches where
  applyOptionalParam req (SavedSearches xs) =
    req `setQuery` toQuery ("savedSearches", Just xs)

-- | /Optional Param/ "organizations" - One of: all, members, none or public
instance HasOptionalParam GetMembersByIdMember Organizations2 where
  applyOptionalParam req (Organizations2 xs) =
    req `setQuery` toQuery ("organizations", Just xs)

-- | /Optional Param/ "organization_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetMembersByIdMember OrganizationFields where
  applyOptionalParam req (OrganizationFields xs) =
    req `setQuery` toQuery ("organization_fields", Just xs)

-- | /Optional Param/ "organization_paid_account" -  true or false
instance HasOptionalParam GetMembersByIdMember OrganizationPaidAccount where
  applyOptionalParam req (OrganizationPaidAccount xs) =
    req `setQuery` toQuery ("organization_paid_account", Just xs)

-- | /Optional Param/ "organizationsInvited" - One of: all, members, none or public
instance HasOptionalParam GetMembersByIdMember OrganizationsInvited where
  applyOptionalParam req (OrganizationsInvited xs) =
    req `setQuery` toQuery ("organizationsInvited", Just xs)

-- | /Optional Param/ "organizationsInvited_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetMembersByIdMember OrganizationsInvitedFields where
  applyOptionalParam req (OrganizationsInvitedFields xs) =
    req `setQuery` toQuery ("organizationsInvited_fields", Just xs)

-- | /Optional Param/ "notifications" - all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
instance HasOptionalParam GetMembersByIdMember Notifications2 where
  applyOptionalParam req (Notifications2 xs) =
    req `setQuery` toQuery ("notifications", Just xs)

-- | /Optional Param/ "notifications_entities" -  true or false
instance HasOptionalParam GetMembersByIdMember NotificationsEntities where
  applyOptionalParam req (NotificationsEntities xs) =
    req `setQuery` toQuery ("notifications_entities", Just xs)

-- | /Optional Param/ "notifications_display" -  true or false
instance HasOptionalParam GetMembersByIdMember NotificationsDisplay where
  applyOptionalParam req (NotificationsDisplay xs) =
    req `setQuery` toQuery ("notifications_display", Just xs)

-- | /Optional Param/ "notifications_limit" - a number from 1 to 1000
instance HasOptionalParam GetMembersByIdMember NotificationsLimit where
  applyOptionalParam req (NotificationsLimit xs) =
    req `setQuery` toQuery ("notifications_limit", Just xs)

-- | /Optional Param/ "notification_fields" - all or a comma-separated list of: data, date, idMemberCreator, type or unread
instance HasOptionalParam GetMembersByIdMember NotificationFields where
  applyOptionalParam req (NotificationFields xs) =
    req `setQuery` toQuery ("notification_fields", Just xs)

-- | /Optional Param/ "notification_memberCreator" -  true or false
instance HasOptionalParam GetMembersByIdMember NotificationMemberCreator where
  applyOptionalParam req (NotificationMemberCreator xs) =
    req `setQuery` toQuery ("notification_memberCreator", Just xs)

-- | /Optional Param/ "notification_memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetMembersByIdMember NotificationMemberCreatorFields where
  applyOptionalParam req (NotificationMemberCreatorFields xs) =
    req `setQuery` toQuery ("notification_memberCreator_fields", Just xs)

-- | /Optional Param/ "notification_before" - An id, or null
instance HasOptionalParam GetMembersByIdMember NotificationBefore where
  applyOptionalParam req (NotificationBefore xs) =
    req `setQuery` toQuery ("notification_before", Just xs)

-- | /Optional Param/ "notification_since" - An id, or null
instance HasOptionalParam GetMembersByIdMember NotificationSince where
  applyOptionalParam req (NotificationSince xs) =
    req `setQuery` toQuery ("notification_since", Just xs)

-- | /Optional Param/ "tokens" - One of: all or none
instance HasOptionalParam GetMembersByIdMember Tokens where
  applyOptionalParam req (Tokens xs) =
    req `setQuery` toQuery ("tokens", Just xs)

-- | /Optional Param/ "paid_account" -  true or false
instance HasOptionalParam GetMembersByIdMember PaidAccount where
  applyOptionalParam req (PaidAccount xs) =
    req `setQuery` toQuery ("paid_account", Just xs)

-- | /Optional Param/ "boardBackgrounds" - One of: all, custom, default, none or premium
instance HasOptionalParam GetMembersByIdMember BoardBackgrounds where
  applyOptionalParam req (BoardBackgrounds xs) =
    req `setQuery` toQuery ("boardBackgrounds", Just xs)

-- | /Optional Param/ "customBoardBackgrounds" - One of: all or none
instance HasOptionalParam GetMembersByIdMember CustomBoardBackgrounds where
  applyOptionalParam req (CustomBoardBackgrounds xs) =
    req `setQuery` toQuery ("customBoardBackgrounds", Just xs)

-- | /Optional Param/ "customStickers" - One of: all or none
instance HasOptionalParam GetMembersByIdMember CustomStickers where
  applyOptionalParam req (CustomStickers xs) =
    req `setQuery` toQuery ("customStickers", Just xs)

-- | /Optional Param/ "customEmoji" - One of: all or none
instance HasOptionalParam GetMembersByIdMember CustomEmoji where
  applyOptionalParam req (CustomEmoji xs) =
    req `setQuery` toQuery ("customEmoji", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
instance HasOptionalParam GetMembersByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersByIdMemberByField

-- | @GET \/members\/{idMember}\/{field}@
-- 
-- getMembersByIdMemberByField()
-- 
getMembersByIdMemberByField 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersByIdMemberByField MimeNoContent NoContent MimeNoContent
getMembersByIdMemberByField (IdMember idMember) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersByIdMemberByField  

-- *** getMembersCardsByIdMember

-- | @GET \/members\/{idMember}\/cards@
-- 
-- getMembersCardsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCardsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCardsByIdMember MimeNoContent NoContent MimeNoContent
getMembersCardsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCardsByIdMember  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetMembersCardsByIdMember Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetMembersCardsByIdMember Attachments where
  applyOptionalParam req (Attachments xs) =
    req `setQuery` toQuery ("attachments", Just xs)

-- | /Optional Param/ "attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetMembersCardsByIdMember AttachmentFields where
  applyOptionalParam req (AttachmentFields xs) =
    req `setQuery` toQuery ("attachment_fields", Just xs)

-- | /Optional Param/ "stickers" -  true or false
instance HasOptionalParam GetMembersCardsByIdMember Stickers where
  applyOptionalParam req (Stickers xs) =
    req `setQuery` toQuery ("stickers", Just xs)

-- | /Optional Param/ "members" -  true or false
instance HasOptionalParam GetMembersCardsByIdMember Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetMembersCardsByIdMember MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "checkItemStates" -  true or false
instance HasOptionalParam GetMembersCardsByIdMember CheckItemStates where
  applyOptionalParam req (CheckItemStates xs) =
    req `setQuery` toQuery ("checkItemStates", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetMembersCardsByIdMember Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "limit" - a number from 1 to 1000
instance HasOptionalParam GetMembersCardsByIdMember Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "since" - A date, or null
instance HasOptionalParam GetMembersCardsByIdMember Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "before" - A date, or null
instance HasOptionalParam GetMembersCardsByIdMember Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "filter" - One of: all, closed, none, open or visible
instance HasOptionalParam GetMembersCardsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetMembersCardsByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersCardsByIdMemberByFilter

-- | @GET \/members\/{idMember}\/cards\/{filter}@
-- 
-- getMembersCardsByIdMemberByFilter()
-- 
getMembersCardsByIdMemberByFilter 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCardsByIdMemberByFilter MimeNoContent NoContent MimeNoContent
getMembersCardsByIdMemberByFilter (IdMember idMember) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/cards/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCardsByIdMemberByFilter  

-- *** getMembersCustomBoardBackgroundsByIdMember

-- | @GET \/members\/{idMember}\/customBoardBackgrounds@
-- 
-- getMembersCustomBoardBackgroundsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCustomBoardBackgroundsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCustomBoardBackgroundsByIdMember MimeNoContent NoContent MimeNoContent
getMembersCustomBoardBackgroundsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/customBoardBackgrounds"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCustomBoardBackgroundsByIdMember  

-- | /Optional Param/ "filter" - One of: all or none
instance HasOptionalParam GetMembersCustomBoardBackgroundsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground

-- | @GET \/members\/{idMember}\/customBoardBackgrounds\/{idBoardBackground}@
-- 
-- getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardBackground -- ^ "idBoardBackground" -  idBoardBackground
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground MimeNoContent NoContent MimeNoContent
getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground (IdMember idMember) (IdBoardBackground idBoardBackground) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/customBoardBackgrounds/",toPath idBoardBackground]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground  

-- | /Optional Param/ "fields" - all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile
instance HasOptionalParam GetMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersCustomEmojiByIdMember

-- | @GET \/members\/{idMember}\/customEmoji@
-- 
-- getMembersCustomEmojiByIdMember()
-- 
-- This gets the list of all of the user’s uploaded emoji
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCustomEmojiByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCustomEmojiByIdMember MimeNoContent NoContent MimeNoContent
getMembersCustomEmojiByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/customEmoji"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCustomEmojiByIdMember  

-- | /Optional Param/ "filter" - One of: all or none
instance HasOptionalParam GetMembersCustomEmojiByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** getMembersCustomEmojiByIdMemberByIdCustomEmoji

-- | @GET \/members\/{idMember}\/customEmoji\/{idCustomEmoji}@
-- 
-- getMembersCustomEmojiByIdMemberByIdCustomEmoji()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCustomEmojiByIdMemberByIdCustomEmoji 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdCustomEmoji -- ^ "idCustomEmoji" -  idCustomEmoji
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCustomEmojiByIdMemberByIdCustomEmoji MimeNoContent NoContent MimeNoContent
getMembersCustomEmojiByIdMemberByIdCustomEmoji (IdMember idMember) (IdCustomEmoji idCustomEmoji) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/customEmoji/",toPath idCustomEmoji]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCustomEmojiByIdMemberByIdCustomEmoji  

-- | /Optional Param/ "fields" - all or a comma-separated list of: name or url
instance HasOptionalParam GetMembersCustomEmojiByIdMemberByIdCustomEmoji Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersCustomStickersByIdMember

-- | @GET \/members\/{idMember}\/customStickers@
-- 
-- getMembersCustomStickersByIdMember()
-- 
-- This gets a list of all of the user’s uploaded stickers
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCustomStickersByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCustomStickersByIdMember MimeNoContent NoContent MimeNoContent
getMembersCustomStickersByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/customStickers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCustomStickersByIdMember  

-- | /Optional Param/ "filter" - One of: all or none
instance HasOptionalParam GetMembersCustomStickersByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** getMembersCustomStickersByIdMemberByIdCustomSticker

-- | @GET \/members\/{idMember}\/customStickers\/{idCustomSticker}@
-- 
-- getMembersCustomStickersByIdMemberByIdCustomSticker()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersCustomStickersByIdMemberByIdCustomSticker 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdCustomSticker -- ^ "idCustomSticker" -  idCustomSticker
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersCustomStickersByIdMemberByIdCustomSticker MimeNoContent NoContent MimeNoContent
getMembersCustomStickersByIdMemberByIdCustomSticker (IdMember idMember) (IdCustomSticker idCustomSticker) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/customStickers/",toPath idCustomSticker]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersCustomStickersByIdMemberByIdCustomSticker  

-- | /Optional Param/ "fields" - all or a comma-separated list of: scaled or url
instance HasOptionalParam GetMembersCustomStickersByIdMemberByIdCustomSticker Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersDeltasByIdMember

-- | @GET \/members\/{idMember}\/deltas@
-- 
-- getMembersDeltasByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersDeltasByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Tags -- ^ "tags" -  A valid tag for subscribing
  -> IxLastUpdate -- ^ "ixLastUpdate" -  a number from -1 to Infinity
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersDeltasByIdMember MimeNoContent NoContent MimeNoContent
getMembersDeltasByIdMember (IdMember idMember) (Tags tags) (IxLastUpdate ixLastUpdate) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/deltas"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("tags", Just tags)
    `setQuery` toQuery ("ixLastUpdate", Just ixLastUpdate)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersDeltasByIdMember  

-- *** getMembersNotificationsByIdMember

-- | @GET \/members\/{idMember}\/notifications@
-- 
-- getMembersNotificationsByIdMember()
-- 
-- You can only read the notifications for the member associated with the supplied token
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersNotificationsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersNotificationsByIdMember MimeNoContent NoContent MimeNoContent
getMembersNotificationsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/notifications"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersNotificationsByIdMember  

-- | /Optional Param/ "entities" -  true or false
instance HasOptionalParam GetMembersNotificationsByIdMember Entities where
  applyOptionalParam req (Entities xs) =
    req `setQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "display" -  true or false
instance HasOptionalParam GetMembersNotificationsByIdMember Display where
  applyOptionalParam req (Display xs) =
    req `setQuery` toQuery ("display", Just xs)

-- | /Optional Param/ "filter" - all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard
instance HasOptionalParam GetMembersNotificationsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "read_filter" - One of: all, read or unread
instance HasOptionalParam GetMembersNotificationsByIdMember ReadFilter where
  applyOptionalParam req (ReadFilter xs) =
    req `setQuery` toQuery ("read_filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: data, date, idMemberCreator, type or unread
instance HasOptionalParam GetMembersNotificationsByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "limit" - a number from 1 to 1000
instance HasOptionalParam GetMembersNotificationsByIdMember Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "page" - a number from 0 to 100
instance HasOptionalParam GetMembersNotificationsByIdMember Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "before" - An id, or null
instance HasOptionalParam GetMembersNotificationsByIdMember Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "since" - An id, or null
instance HasOptionalParam GetMembersNotificationsByIdMember Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "memberCreator" -  true or false
instance HasOptionalParam GetMembersNotificationsByIdMember MemberCreator where
  applyOptionalParam req (MemberCreator xs) =
    req `setQuery` toQuery ("memberCreator", Just xs)

-- | /Optional Param/ "memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetMembersNotificationsByIdMember MemberCreatorFields where
  applyOptionalParam req (MemberCreatorFields xs) =
    req `setQuery` toQuery ("memberCreator_fields", Just xs)

-- *** getMembersNotificationsByIdMemberByFilter

-- | @GET \/members\/{idMember}\/notifications\/{filter}@
-- 
-- getMembersNotificationsByIdMemberByFilter()
-- 
getMembersNotificationsByIdMemberByFilter 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersNotificationsByIdMemberByFilter MimeNoContent NoContent MimeNoContent
getMembersNotificationsByIdMemberByFilter (IdMember idMember) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/notifications/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersNotificationsByIdMemberByFilter  

-- *** getMembersOrganizationsByIdMember

-- | @GET \/members\/{idMember}\/organizations@
-- 
-- getMembersOrganizationsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersOrganizationsByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersOrganizationsByIdMember MimeNoContent NoContent MimeNoContent
getMembersOrganizationsByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/organizations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersOrganizationsByIdMember  

-- | /Optional Param/ "filter" - One of: all, members, none or public
instance HasOptionalParam GetMembersOrganizationsByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetMembersOrganizationsByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "paid_account" -  true or false
instance HasOptionalParam GetMembersOrganizationsByIdMember PaidAccount where
  applyOptionalParam req (PaidAccount xs) =
    req `setQuery` toQuery ("paid_account", Just xs)

-- *** getMembersOrganizationsByIdMemberByFilter

-- | @GET \/members\/{idMember}\/organizations\/{filter}@
-- 
-- getMembersOrganizationsByIdMemberByFilter()
-- 
getMembersOrganizationsByIdMemberByFilter 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersOrganizationsByIdMemberByFilter MimeNoContent NoContent MimeNoContent
getMembersOrganizationsByIdMemberByFilter (IdMember idMember) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/organizations/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersOrganizationsByIdMemberByFilter  

-- *** getMembersOrganizationsInvitedByIdMember

-- | @GET \/members\/{idMember}\/organizationsInvited@
-- 
-- getMembersOrganizationsInvitedByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersOrganizationsInvitedByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersOrganizationsInvitedByIdMember MimeNoContent NoContent MimeNoContent
getMembersOrganizationsInvitedByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/organizationsInvited"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersOrganizationsInvitedByIdMember  

-- | /Optional Param/ "fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetMembersOrganizationsInvitedByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getMembersOrganizationsInvitedByIdMemberByField

-- | @GET \/members\/{idMember}\/organizationsInvited\/{field}@
-- 
-- getMembersOrganizationsInvitedByIdMemberByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersOrganizationsInvitedByIdMemberByField 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersOrganizationsInvitedByIdMemberByField MimeNoContent NoContent MimeNoContent
getMembersOrganizationsInvitedByIdMemberByField (IdMember idMember) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/organizationsInvited/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersOrganizationsInvitedByIdMemberByField  

-- *** getMembersSavedSearchesByIdMember

-- | @GET \/members\/{idMember}\/savedSearches@
-- 
-- getMembersSavedSearchesByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersSavedSearchesByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersSavedSearchesByIdMember MimeNoContent NoContent MimeNoContent
getMembersSavedSearchesByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/savedSearches"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersSavedSearchesByIdMember  

-- *** getMembersSavedSearchesByIdMemberByIdSavedSearch

-- | @GET \/members\/{idMember}\/savedSearches\/{idSavedSearch}@
-- 
-- getMembersSavedSearchesByIdMemberByIdSavedSearch()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersSavedSearchesByIdMemberByIdSavedSearch 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> IdSavedSearch -- ^ "idSavedSearch" -  idSavedSearch
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersSavedSearchesByIdMemberByIdSavedSearch MimeNoContent NoContent MimeNoContent
getMembersSavedSearchesByIdMemberByIdSavedSearch (IdMember idMember) (IdSavedSearch idSavedSearch) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/savedSearches/",toPath idSavedSearch]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersSavedSearchesByIdMemberByIdSavedSearch  

-- *** getMembersTokensByIdMember

-- | @GET \/members\/{idMember}\/tokens@
-- 
-- getMembersTokensByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getMembersTokensByIdMember 
  :: IdMember -- ^ "idMember" -  idMember or username
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetMembersTokensByIdMember MimeNoContent NoContent MimeNoContent
getMembersTokensByIdMember (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/members/",toPath idMember,"/tokens"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetMembersTokensByIdMember  

-- | /Optional Param/ "filter" - One of: all or none
instance HasOptionalParam GetMembersTokensByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** updateMembersAvatarSourceByIdMember

-- | @PUT \/members\/{idMember}\/avatarSource@
-- 
-- updateMembersAvatarSourceByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersAvatarSourceByIdMember 
  :: (Consumes UpdateMembersAvatarSourceByIdMember contentType, MimeRender contentType MembersAvatarSource)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersAvatarSource -- ^ "body" -  Attributes of \"Members Avatar Source\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersAvatarSourceByIdMember contentType NoContent MimeNoContent
updateMembersAvatarSourceByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/avatarSource"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersAvatarSourceByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Avatar Source\" to be updated.
instance HasBodyParam UpdateMembersAvatarSourceByIdMember MembersAvatarSource 

-- *** updateMembersBioByIdMember

-- | @PUT \/members\/{idMember}\/bio@
-- 
-- updateMembersBioByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersBioByIdMember 
  :: (Consumes UpdateMembersBioByIdMember contentType, MimeRender contentType MembersBio)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersBio -- ^ "body" -  Attributes of \"Members Bio\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersBioByIdMember contentType NoContent MimeNoContent
updateMembersBioByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/bio"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersBioByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Bio\" to be updated.
instance HasBodyParam UpdateMembersBioByIdMember MembersBio 

-- *** updateMembersBoardBackgroundsByIdMemberByIdBoardBackground

-- | @PUT \/members\/{idMember}\/boardBackgrounds\/{idBoardBackground}@
-- 
-- updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersBoardBackgroundsByIdMemberByIdBoardBackground 
  :: (Consumes UpdateMembersBoardBackgroundsByIdMemberByIdBoardBackground contentType, MimeRender contentType MembersBoardBackgrounds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardBackground -- ^ "idBoardBackground" -  idBoardBackground
  -> MembersBoardBackgrounds -- ^ "body" -  Attributes of \"Members Board Backgrounds\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersBoardBackgroundsByIdMemberByIdBoardBackground contentType NoContent MimeNoContent
updateMembersBoardBackgroundsByIdMemberByIdBoardBackground _ (IdMember idMember) (IdBoardBackground idBoardBackground) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/boardBackgrounds/",toPath idBoardBackground]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersBoardBackgroundsByIdMemberByIdBoardBackground 

-- | /Body Param/ "body" - Attributes of \"Members Board Backgrounds\" to be updated.
instance HasBodyParam UpdateMembersBoardBackgroundsByIdMemberByIdBoardBackground MembersBoardBackgrounds 

-- *** updateMembersBoardStarsByIdMemberByIdBoardStar

-- | @PUT \/members\/{idMember}\/boardStars\/{idBoardStar}@
-- 
-- updateMembersBoardStarsByIdMemberByIdBoardStar()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersBoardStarsByIdMemberByIdBoardStar 
  :: (Consumes UpdateMembersBoardStarsByIdMemberByIdBoardStar contentType, MimeRender contentType MembersBoardStars)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardStar -- ^ "idBoardStar" -  idBoardStar
  -> MembersBoardStars -- ^ "body" -  Attributes of \"Members Board Stars\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersBoardStarsByIdMemberByIdBoardStar contentType NoContent MimeNoContent
updateMembersBoardStarsByIdMemberByIdBoardStar _ (IdMember idMember) (IdBoardStar idBoardStar) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/boardStars/",toPath idBoardStar]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersBoardStarsByIdMemberByIdBoardStar 

-- | /Body Param/ "body" - Attributes of \"Members Board Stars\" to be updated.
instance HasBodyParam UpdateMembersBoardStarsByIdMemberByIdBoardStar MembersBoardStars 

-- *** updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar

-- | @PUT \/members\/{idMember}\/boardStars\/{idBoardStar}\/idBoard@
-- 
-- updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar 
  :: (Consumes UpdateMembersBoardStarsIdBoardByIdMemberByIdBoardStar contentType, MimeRender contentType MembersBoardStarsIdBoard)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardStar -- ^ "idBoardStar" -  idBoardStar
  -> MembersBoardStarsIdBoard -- ^ "body" -  Attributes of \"Members Board Stars Id Board\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersBoardStarsIdBoardByIdMemberByIdBoardStar contentType NoContent MimeNoContent
updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar _ (IdMember idMember) (IdBoardStar idBoardStar) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/boardStars/",toPath idBoardStar,"/idBoard"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersBoardStarsIdBoardByIdMemberByIdBoardStar 

-- | /Body Param/ "body" - Attributes of \"Members Board Stars Id Board\" to be updated.
instance HasBodyParam UpdateMembersBoardStarsIdBoardByIdMemberByIdBoardStar MembersBoardStarsIdBoard 

-- *** updateMembersBoardStarsPosByIdMemberByIdBoardStar

-- | @PUT \/members\/{idMember}\/boardStars\/{idBoardStar}\/pos@
-- 
-- updateMembersBoardStarsPosByIdMemberByIdBoardStar()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersBoardStarsPosByIdMemberByIdBoardStar 
  :: (Consumes UpdateMembersBoardStarsPosByIdMemberByIdBoardStar contentType, MimeRender contentType MembersBoardStarsPos)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardStar -- ^ "idBoardStar" -  idBoardStar
  -> MembersBoardStarsPos -- ^ "body" -  Attributes of \"Members Board Stars Pos\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersBoardStarsPosByIdMemberByIdBoardStar contentType NoContent MimeNoContent
updateMembersBoardStarsPosByIdMemberByIdBoardStar _ (IdMember idMember) (IdBoardStar idBoardStar) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/boardStars/",toPath idBoardStar,"/pos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersBoardStarsPosByIdMemberByIdBoardStar 

-- | /Body Param/ "body" - Attributes of \"Members Board Stars Pos\" to be updated.
instance HasBodyParam UpdateMembersBoardStarsPosByIdMemberByIdBoardStar MembersBoardStarsPos 

-- *** updateMembersByIdMember

-- | @PUT \/members\/{idMember}@
-- 
-- updateMembersByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersByIdMember 
  :: (Consumes UpdateMembersByIdMember contentType, MimeRender contentType Members)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> Members -- ^ "body" -  Attributes of \"Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersByIdMember contentType NoContent MimeNoContent
updateMembersByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members\" to be updated.
instance HasBodyParam UpdateMembersByIdMember Members 

-- *** updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground

-- | @PUT \/members\/{idMember}\/customBoardBackgrounds\/{idBoardBackground}@
-- 
-- updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground 
  :: (Consumes UpdateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground contentType, MimeRender contentType MembersCustomBoardBackgrounds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdBoardBackground -- ^ "idBoardBackground" -  idBoardBackground
  -> MembersCustomBoardBackgrounds -- ^ "body" -  Attributes of \"Members Custom Board Backgrounds\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground contentType NoContent MimeNoContent
updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground _ (IdMember idMember) (IdBoardBackground idBoardBackground) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/customBoardBackgrounds/",toPath idBoardBackground]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground 

-- | /Body Param/ "body" - Attributes of \"Members Custom Board Backgrounds\" to be updated.
instance HasBodyParam UpdateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground MembersCustomBoardBackgrounds 

-- *** updateMembersFullNameByIdMember

-- | @PUT \/members\/{idMember}\/fullName@
-- 
-- updateMembersFullNameByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersFullNameByIdMember 
  :: (Consumes UpdateMembersFullNameByIdMember contentType, MimeRender contentType MembersFullName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersFullName -- ^ "body" -  Attributes of \"Members Full Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersFullNameByIdMember contentType NoContent MimeNoContent
updateMembersFullNameByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/fullName"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersFullNameByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Full Name\" to be updated.
instance HasBodyParam UpdateMembersFullNameByIdMember MembersFullName 

-- *** updateMembersInitialsByIdMember

-- | @PUT \/members\/{idMember}\/initials@
-- 
-- updateMembersInitialsByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersInitialsByIdMember 
  :: (Consumes UpdateMembersInitialsByIdMember contentType, MimeRender contentType MembersInitials)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersInitials -- ^ "body" -  Attributes of \"Members Initials\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersInitialsByIdMember contentType NoContent MimeNoContent
updateMembersInitialsByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/initials"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersInitialsByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Initials\" to be updated.
instance HasBodyParam UpdateMembersInitialsByIdMember MembersInitials 

-- *** updateMembersPrefsColorBlindByIdMember

-- | @PUT \/members\/{idMember}\/prefs\/colorBlind@
-- 
-- updateMembersPrefsColorBlindByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersPrefsColorBlindByIdMember 
  :: (Consumes UpdateMembersPrefsColorBlindByIdMember contentType, MimeRender contentType PrefsColorBlind)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> PrefsColorBlind -- ^ "body" -  Attributes of \"Prefs Color Blind\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersPrefsColorBlindByIdMember contentType NoContent MimeNoContent
updateMembersPrefsColorBlindByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/prefs/colorBlind"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersPrefsColorBlindByIdMember 

-- | /Body Param/ "body" - Attributes of \"Prefs Color Blind\" to be updated.
instance HasBodyParam UpdateMembersPrefsColorBlindByIdMember PrefsColorBlind 

-- *** updateMembersPrefsLocaleByIdMember

-- | @PUT \/members\/{idMember}\/prefs\/locale@
-- 
-- updateMembersPrefsLocaleByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersPrefsLocaleByIdMember 
  :: (Consumes UpdateMembersPrefsLocaleByIdMember contentType, MimeRender contentType PrefsLocale)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> PrefsLocale -- ^ "body" -  Attributes of \"Prefs Locale\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersPrefsLocaleByIdMember contentType NoContent MimeNoContent
updateMembersPrefsLocaleByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/prefs/locale"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersPrefsLocaleByIdMember 

-- | /Body Param/ "body" - Attributes of \"Prefs Locale\" to be updated.
instance HasBodyParam UpdateMembersPrefsLocaleByIdMember PrefsLocale 

-- *** updateMembersPrefsMinutesBetweenSummariesByIdMember

-- | @PUT \/members\/{idMember}\/prefs\/minutesBetweenSummaries@
-- 
-- updateMembersPrefsMinutesBetweenSummariesByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersPrefsMinutesBetweenSummariesByIdMember 
  :: (Consumes UpdateMembersPrefsMinutesBetweenSummariesByIdMember contentType, MimeRender contentType PrefsMinutesBetweenSummaries)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> PrefsMinutesBetweenSummaries -- ^ "body" -  Attributes of \"Prefs Minutes Between Summaries\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersPrefsMinutesBetweenSummariesByIdMember contentType NoContent MimeNoContent
updateMembersPrefsMinutesBetweenSummariesByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/prefs/minutesBetweenSummaries"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersPrefsMinutesBetweenSummariesByIdMember 

-- | /Body Param/ "body" - Attributes of \"Prefs Minutes Between Summaries\" to be updated.
instance HasBodyParam UpdateMembersPrefsMinutesBetweenSummariesByIdMember PrefsMinutesBetweenSummaries 

-- *** updateMembersSavedSearchesByIdMemberByIdSavedSearch

-- | @PUT \/members\/{idMember}\/savedSearches\/{idSavedSearch}@
-- 
-- updateMembersSavedSearchesByIdMemberByIdSavedSearch()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersSavedSearchesByIdMemberByIdSavedSearch 
  :: (Consumes UpdateMembersSavedSearchesByIdMemberByIdSavedSearch contentType, MimeRender contentType MembersSavedSearches)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdSavedSearch -- ^ "idSavedSearch" -  idSavedSearch
  -> MembersSavedSearches -- ^ "body" -  Attributes of \"Members Saved Searches\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersSavedSearchesByIdMemberByIdSavedSearch contentType NoContent MimeNoContent
updateMembersSavedSearchesByIdMemberByIdSavedSearch _ (IdMember idMember) (IdSavedSearch idSavedSearch) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/savedSearches/",toPath idSavedSearch]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersSavedSearchesByIdMemberByIdSavedSearch 

-- | /Body Param/ "body" - Attributes of \"Members Saved Searches\" to be updated.
instance HasBodyParam UpdateMembersSavedSearchesByIdMemberByIdSavedSearch MembersSavedSearches 

-- *** updateMembersSavedSearchesNameByIdMemberByIdSavedSearch

-- | @PUT \/members\/{idMember}\/savedSearches\/{idSavedSearch}\/name@
-- 
-- updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersSavedSearchesNameByIdMemberByIdSavedSearch 
  :: (Consumes UpdateMembersSavedSearchesNameByIdMemberByIdSavedSearch contentType, MimeRender contentType MembersSavedSearchesName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdSavedSearch -- ^ "idSavedSearch" -  idSavedSearch
  -> MembersSavedSearchesName -- ^ "body" -  Attributes of \"Members Saved Searches Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersSavedSearchesNameByIdMemberByIdSavedSearch contentType NoContent MimeNoContent
updateMembersSavedSearchesNameByIdMemberByIdSavedSearch _ (IdMember idMember) (IdSavedSearch idSavedSearch) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/savedSearches/",toPath idSavedSearch,"/name"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersSavedSearchesNameByIdMemberByIdSavedSearch 

-- | /Body Param/ "body" - Attributes of \"Members Saved Searches Name\" to be updated.
instance HasBodyParam UpdateMembersSavedSearchesNameByIdMemberByIdSavedSearch MembersSavedSearchesName 

-- *** updateMembersSavedSearchesPosByIdMemberByIdSavedSearch

-- | @PUT \/members\/{idMember}\/savedSearches\/{idSavedSearch}\/pos@
-- 
-- updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersSavedSearchesPosByIdMemberByIdSavedSearch 
  :: (Consumes UpdateMembersSavedSearchesPosByIdMemberByIdSavedSearch contentType, MimeRender contentType MembersSavedSearchesPos)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdSavedSearch -- ^ "idSavedSearch" -  idSavedSearch
  -> MembersSavedSearchesPos -- ^ "body" -  Attributes of \"Members Saved Searches Pos\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersSavedSearchesPosByIdMemberByIdSavedSearch contentType NoContent MimeNoContent
updateMembersSavedSearchesPosByIdMemberByIdSavedSearch _ (IdMember idMember) (IdSavedSearch idSavedSearch) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/savedSearches/",toPath idSavedSearch,"/pos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersSavedSearchesPosByIdMemberByIdSavedSearch 

-- | /Body Param/ "body" - Attributes of \"Members Saved Searches Pos\" to be updated.
instance HasBodyParam UpdateMembersSavedSearchesPosByIdMemberByIdSavedSearch MembersSavedSearchesPos 

-- *** updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch

-- | @PUT \/members\/{idMember}\/savedSearches\/{idSavedSearch}\/query@
-- 
-- updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch 
  :: (Consumes UpdateMembersSavedSearchesQueryByIdMemberByIdSavedSearch contentType, MimeRender contentType MembersSavedSearchesQuery)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> IdSavedSearch -- ^ "idSavedSearch" -  idSavedSearch
  -> MembersSavedSearchesQuery -- ^ "body" -  Attributes of \"Members Saved Searches Query\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersSavedSearchesQueryByIdMemberByIdSavedSearch contentType NoContent MimeNoContent
updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch _ (IdMember idMember) (IdSavedSearch idSavedSearch) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/savedSearches/",toPath idSavedSearch,"/query"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersSavedSearchesQueryByIdMemberByIdSavedSearch 

-- | /Body Param/ "body" - Attributes of \"Members Saved Searches Query\" to be updated.
instance HasBodyParam UpdateMembersSavedSearchesQueryByIdMemberByIdSavedSearch MembersSavedSearchesQuery 

-- *** updateMembersUsernameByIdMember

-- | @PUT \/members\/{idMember}\/username@
-- 
-- updateMembersUsernameByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateMembersUsernameByIdMember 
  :: (Consumes UpdateMembersUsernameByIdMember contentType, MimeRender contentType MembersUsername)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdMember -- ^ "idMember" -  idMember or username
  -> MembersUsername -- ^ "body" -  Attributes of \"Members Username\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateMembersUsernameByIdMember contentType NoContent MimeNoContent
updateMembersUsernameByIdMember _ (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/members/",toPath idMember,"/username"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateMembersUsernameByIdMember 

-- | /Body Param/ "body" - Attributes of \"Members Username\" to be updated.
instance HasBodyParam UpdateMembersUsernameByIdMember MembersUsername 
