{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Session
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Session where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Session

-- *** addSessions

-- | @POST \/sessions@
-- 
-- addSessions()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addSessions 
  :: (Consumes AddSessions contentType, MimeRender contentType Sessions)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Sessions -- ^ "body" -  Attributes of \"Sessions\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddSessions contentType NoContent MimeNoContent
addSessions _ body (Key key) (Token token) =
  _mkRequest "POST" ["/sessions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddSessions 

-- | /Body Param/ "body" - Attributes of \"Sessions\" to be added.
instance HasBodyParam AddSessions Sessions 

-- *** getSessionsSocket

-- | @GET \/sessions\/socket@
-- 
-- getSessionsSocket()
-- 
-- This is the route for WebSocket requests.  See the socket API reference for a description of WebSocket usage.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getSessionsSocket 
  :: Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetSessionsSocket MimeNoContent NoContent MimeNoContent
getSessionsSocket (Key key) (Token token) =
  _mkRequest "GET" ["/sessions/socket"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetSessionsSocket  

-- *** updateSessionsByIdSession

-- | @PUT \/sessions\/{idSession}@
-- 
-- updateSessionsByIdSession()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateSessionsByIdSession 
  :: (Consumes UpdateSessionsByIdSession contentType, MimeRender contentType Sessions)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdSession -- ^ "idSession" -  idSession
  -> Sessions -- ^ "body" -  Attributes of \"Sessions\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateSessionsByIdSession contentType NoContent MimeNoContent
updateSessionsByIdSession _ (IdSession idSession) body (Key key) (Token token) =
  _mkRequest "PUT" ["/sessions/",toPath idSession]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateSessionsByIdSession 

-- | /Body Param/ "body" - Attributes of \"Sessions\" to be updated.
instance HasBodyParam UpdateSessionsByIdSession Sessions 

-- *** updateSessionsStatusByIdSession

-- | @PUT \/sessions\/{idSession}\/status@
-- 
-- updateSessionsStatusByIdSession()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateSessionsStatusByIdSession 
  :: (Consumes UpdateSessionsStatusByIdSession contentType, MimeRender contentType SessionsStatus)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdSession -- ^ "idSession" -  idSession
  -> SessionsStatus -- ^ "body" -  Attributes of \"Sessions Status\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateSessionsStatusByIdSession contentType NoContent MimeNoContent
updateSessionsStatusByIdSession _ (IdSession idSession) body (Key key) (Token token) =
  _mkRequest "PUT" ["/sessions/",toPath idSession,"/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateSessionsStatusByIdSession 

-- | /Body Param/ "body" - Attributes of \"Sessions Status\" to be updated.
instance HasBodyParam UpdateSessionsStatusByIdSession SessionsStatus 
