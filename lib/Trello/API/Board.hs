{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Board
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Board where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Board

-- *** addBoards

-- | @POST \/boards@
-- 
-- addBoards()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoards 
  :: (Consumes AddBoards contentType, MimeRender contentType Boards)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Boards -- ^ "body" -  Attributes of \"Boards\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoards contentType NoContent MimeNoContent
addBoards _ body (Key key) (Token token) =
  _mkRequest "POST" ["/boards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoards 

-- | /Body Param/ "body" - Attributes of \"Boards\" to be added.
instance HasBodyParam AddBoards Boards 

-- *** addBoardsCalendarKeyGenerateByIdBoard

-- | @POST \/boards\/{idBoard}\/calendarKey\/generate@
-- 
-- addBoardsCalendarKeyGenerateByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsCalendarKeyGenerateByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsCalendarKeyGenerateByIdBoard MimeNoContent NoContent MimeNoContent
addBoardsCalendarKeyGenerateByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/calendarKey/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsCalendarKeyGenerateByIdBoard  

-- *** addBoardsChecklistsByIdBoard

-- | @POST \/boards\/{idBoard}\/checklists@
-- 
-- addBoardsChecklistsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsChecklistsByIdBoard 
  :: (Consumes AddBoardsChecklistsByIdBoard contentType, MimeRender contentType BoardsChecklists)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsChecklists -- ^ "body" -  Attributes of \"Boards Checklists\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsChecklistsByIdBoard contentType NoContent MimeNoContent
addBoardsChecklistsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/checklists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsChecklistsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Checklists\" to be added.
instance HasBodyParam AddBoardsChecklistsByIdBoard BoardsChecklists 

-- *** addBoardsEmailKeyGenerateByIdBoard

-- | @POST \/boards\/{idBoard}\/emailKey\/generate@
-- 
-- addBoardsEmailKeyGenerateByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsEmailKeyGenerateByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsEmailKeyGenerateByIdBoard MimeNoContent NoContent MimeNoContent
addBoardsEmailKeyGenerateByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/emailKey/generate"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsEmailKeyGenerateByIdBoard  

-- *** addBoardsLabelsByIdBoard

-- | @POST \/boards\/{idBoard}\/labels@
-- 
-- addBoardsLabelsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsLabelsByIdBoard 
  :: (Consumes AddBoardsLabelsByIdBoard contentType, MimeRender contentType BoardsLabels)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsLabels -- ^ "body" -  Attributes of \"Boards Labels\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsLabelsByIdBoard contentType NoContent MimeNoContent
addBoardsLabelsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsLabelsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Labels\" to be added.
instance HasBodyParam AddBoardsLabelsByIdBoard BoardsLabels 

-- *** addBoardsListsByIdBoard

-- | @POST \/boards\/{idBoard}\/lists@
-- 
-- addBoardsListsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsListsByIdBoard 
  :: (Consumes AddBoardsListsByIdBoard contentType, MimeRender contentType BoardsLists)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsLists -- ^ "body" -  Attributes of \"Boards Lists\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsListsByIdBoard contentType NoContent MimeNoContent
addBoardsListsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/lists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsListsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Lists\" to be added.
instance HasBodyParam AddBoardsListsByIdBoard BoardsLists 

-- *** addBoardsMarkAsViewedByIdBoard

-- | @POST \/boards\/{idBoard}\/markAsViewed@
-- 
-- addBoardsMarkAsViewedByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsMarkAsViewedByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsMarkAsViewedByIdBoard MimeNoContent NoContent MimeNoContent
addBoardsMarkAsViewedByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/markAsViewed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsMarkAsViewedByIdBoard  

-- *** addBoardsPowerUpsByIdBoard

-- | @POST \/boards\/{idBoard}\/powerUps@
-- 
-- addBoardsPowerUpsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addBoardsPowerUpsByIdBoard 
  :: (Consumes AddBoardsPowerUpsByIdBoard contentType, MimeRender contentType BoardsPowerUps)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsPowerUps -- ^ "body" -  Attributes of \"Boards Power Ups\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddBoardsPowerUpsByIdBoard contentType NoContent MimeNoContent
addBoardsPowerUpsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "POST" ["/boards/",toPath idBoard,"/powerUps"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddBoardsPowerUpsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Power Ups\" to be added.
instance HasBodyParam AddBoardsPowerUpsByIdBoard BoardsPowerUps 

-- *** deleteBoardsMembersByIdBoardByIdMember

-- | @DELETE \/boards\/{idBoard}\/members\/{idMember}@
-- 
-- deleteBoardsMembersByIdBoardByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteBoardsMembersByIdBoardByIdMember 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteBoardsMembersByIdBoardByIdMember MimeNoContent NoContent MimeNoContent
deleteBoardsMembersByIdBoardByIdMember (IdBoard idBoard) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "DELETE" ["/boards/",toPath idBoard,"/members/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteBoardsMembersByIdBoardByIdMember  

-- *** deleteBoardsPowerUpsByIdBoardByPowerUp

-- | @DELETE \/boards\/{idBoard}\/powerUps\/{powerUp}@
-- 
-- deleteBoardsPowerUpsByIdBoardByPowerUp()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteBoardsPowerUpsByIdBoardByPowerUp 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> PowerUp -- ^ "powerUp" -  powerUp
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteBoardsPowerUpsByIdBoardByPowerUp MimeNoContent NoContent MimeNoContent
deleteBoardsPowerUpsByIdBoardByPowerUp (IdBoard idBoard) (PowerUp powerUp) (Key key) (Token token) =
  _mkRequest "DELETE" ["/boards/",toPath idBoard,"/powerUps/",toPath powerUp]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteBoardsPowerUpsByIdBoardByPowerUp  

-- *** getBoardsActionsByIdBoard

-- | @GET \/boards\/{idBoard}\/actions@
-- 
-- getBoardsActionsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsActionsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsActionsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsActionsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/actions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsActionsByIdBoard  

-- | /Optional Param/ "entities" -  true or false
instance HasOptionalParam GetBoardsActionsByIdBoard Entities where
  applyOptionalParam req (Entities xs) =
    req `setQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "display" -  true or false
instance HasOptionalParam GetBoardsActionsByIdBoard Display where
  applyOptionalParam req (Display xs) =
    req `setQuery` toQuery ("display", Just xs)

-- | /Optional Param/ "filter" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetBoardsActionsByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetBoardsActionsByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "limit" - a number from 0 to 1000
instance HasOptionalParam GetBoardsActionsByIdBoard Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "format" - One of: count, list or minimal
instance HasOptionalParam GetBoardsActionsByIdBoard Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "since" - A date, null or lastView
instance HasOptionalParam GetBoardsActionsByIdBoard Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "before" - A date, or null
instance HasOptionalParam GetBoardsActionsByIdBoard Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "page" - Page * limit must be less than 1000
instance HasOptionalParam GetBoardsActionsByIdBoard Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "idModels" - Only return actions related to these model ids
instance HasOptionalParam GetBoardsActionsByIdBoard IdModels where
  applyOptionalParam req (IdModels xs) =
    req `setQuery` toQuery ("idModels", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetBoardsActionsByIdBoard Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsActionsByIdBoard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "memberCreator" -  true or false
instance HasOptionalParam GetBoardsActionsByIdBoard MemberCreator where
  applyOptionalParam req (MemberCreator xs) =
    req `setQuery` toQuery ("memberCreator", Just xs)

-- | /Optional Param/ "memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsActionsByIdBoard MemberCreatorFields where
  applyOptionalParam req (MemberCreatorFields xs) =
    req `setQuery` toQuery ("memberCreator_fields", Just xs)

-- *** getBoardsBoardStarsByIdBoard

-- | @GET \/boards\/{idBoard}\/boardStars@
-- 
-- getBoardsBoardStarsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsBoardStarsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsBoardStarsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsBoardStarsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/boardStars"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsBoardStarsByIdBoard  

-- | /Optional Param/ "filter" - One of: mine or none
instance HasOptionalParam GetBoardsBoardStarsByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** getBoardsByIdBoard

-- | @GET \/boards\/{idBoard}@
-- 
-- getBoardsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsByIdBoard  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetBoardsByIdBoard Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetBoardsByIdBoard ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_display" -  true or false
instance HasOptionalParam GetBoardsByIdBoard ActionsDisplay where
  applyOptionalParam req (ActionsDisplay xs) =
    req `setQuery` toQuery ("actions_display", Just xs)

-- | /Optional Param/ "actions_format" - One of: count, list or minimal
instance HasOptionalParam GetBoardsByIdBoard ActionsFormat where
  applyOptionalParam req (ActionsFormat xs) =
    req `setQuery` toQuery ("actions_format", Just xs)

-- | /Optional Param/ "actions_since" - A date, null or lastView
instance HasOptionalParam GetBoardsByIdBoard ActionsSince where
  applyOptionalParam req (ActionsSince xs) =
    req `setQuery` toQuery ("actions_since", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetBoardsByIdBoard ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetBoardsByIdBoard ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "action_member" -  true or false
instance HasOptionalParam GetBoardsByIdBoard ActionMember where
  applyOptionalParam req (ActionMember xs) =
    req `setQuery` toQuery ("action_member", Just xs)

-- | /Optional Param/ "action_member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsByIdBoard ActionMemberFields where
  applyOptionalParam req (ActionMemberFields xs) =
    req `setQuery` toQuery ("action_member_fields", Just xs)

-- | /Optional Param/ "action_memberCreator" -  true or false
instance HasOptionalParam GetBoardsByIdBoard ActionMemberCreator where
  applyOptionalParam req (ActionMemberCreator xs) =
    req `setQuery` toQuery ("action_memberCreator", Just xs)

-- | /Optional Param/ "action_memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsByIdBoard ActionMemberCreatorFields where
  applyOptionalParam req (ActionMemberCreatorFields xs) =
    req `setQuery` toQuery ("action_memberCreator_fields", Just xs)

-- | /Optional Param/ "cards" - One of: all, closed, none, open or visible
instance HasOptionalParam GetBoardsByIdBoard Cards2 where
  applyOptionalParam req (Cards2 xs) =
    req `setQuery` toQuery ("cards", Just xs)

-- | /Optional Param/ "card_fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetBoardsByIdBoard CardFields where
  applyOptionalParam req (CardFields xs) =
    req `setQuery` toQuery ("card_fields", Just xs)

-- | /Optional Param/ "card_attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetBoardsByIdBoard CardAttachments where
  applyOptionalParam req (CardAttachments xs) =
    req `setQuery` toQuery ("card_attachments", Just xs)

-- | /Optional Param/ "card_attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetBoardsByIdBoard CardAttachmentFields where
  applyOptionalParam req (CardAttachmentFields xs) =
    req `setQuery` toQuery ("card_attachment_fields", Just xs)

-- | /Optional Param/ "card_checklists" - One of: all or none
instance HasOptionalParam GetBoardsByIdBoard CardChecklists where
  applyOptionalParam req (CardChecklists xs) =
    req `setQuery` toQuery ("card_checklists", Just xs)

-- | /Optional Param/ "card_stickers" -  true or false
instance HasOptionalParam GetBoardsByIdBoard CardStickers where
  applyOptionalParam req (CardStickers xs) =
    req `setQuery` toQuery ("card_stickers", Just xs)

-- | /Optional Param/ "boardStars" - One of: mine or none
instance HasOptionalParam GetBoardsByIdBoard BoardStars where
  applyOptionalParam req (BoardStars xs) =
    req `setQuery` toQuery ("boardStars", Just xs)

-- | /Optional Param/ "labels" - One of: all or none
instance HasOptionalParam GetBoardsByIdBoard Labels2 where
  applyOptionalParam req (Labels2 xs) =
    req `setQuery` toQuery ("labels", Just xs)

-- | /Optional Param/ "label_fields" - all or a comma-separated list of: color, idBoard, name or uses
instance HasOptionalParam GetBoardsByIdBoard LabelFields where
  applyOptionalParam req (LabelFields xs) =
    req `setQuery` toQuery ("label_fields", Just xs)

-- | /Optional Param/ "labels_limit" - a number from 0 to 1000
instance HasOptionalParam GetBoardsByIdBoard LabelsLimit where
  applyOptionalParam req (LabelsLimit xs) =
    req `setQuery` toQuery ("labels_limit", Just xs)

-- | /Optional Param/ "lists" - One of: all, closed, none or open
instance HasOptionalParam GetBoardsByIdBoard Lists2 where
  applyOptionalParam req (Lists2 xs) =
    req `setQuery` toQuery ("lists", Just xs)

-- | /Optional Param/ "list_fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetBoardsByIdBoard ListFields where
  applyOptionalParam req (ListFields xs) =
    req `setQuery` toQuery ("list_fields", Just xs)

-- | /Optional Param/ "memberships" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetBoardsByIdBoard Memberships where
  applyOptionalParam req (Memberships xs) =
    req `setQuery` toQuery ("memberships", Just xs)

-- | /Optional Param/ "memberships_member" -  true or false
instance HasOptionalParam GetBoardsByIdBoard MembershipsMember where
  applyOptionalParam req (MembershipsMember xs) =
    req `setQuery` toQuery ("memberships_member", Just xs)

-- | /Optional Param/ "memberships_member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsByIdBoard MembershipsMemberFields where
  applyOptionalParam req (MembershipsMemberFields xs) =
    req `setQuery` toQuery ("memberships_member_fields", Just xs)

-- | /Optional Param/ "members" - One of: admins, all, none, normal or owners
instance HasOptionalParam GetBoardsByIdBoard Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsByIdBoard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "membersInvited" - One of: admins, all, none, normal or owners
instance HasOptionalParam GetBoardsByIdBoard MembersInvited where
  applyOptionalParam req (MembersInvited xs) =
    req `setQuery` toQuery ("membersInvited", Just xs)

-- | /Optional Param/ "membersInvited_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsByIdBoard MembersInvitedFields where
  applyOptionalParam req (MembersInvitedFields xs) =
    req `setQuery` toQuery ("membersInvited_fields", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetBoardsByIdBoard Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "checklist_fields" - all or a comma-separated list of: idBoard, idCard, name or pos
instance HasOptionalParam GetBoardsByIdBoard ChecklistFields where
  applyOptionalParam req (ChecklistFields xs) =
    req `setQuery` toQuery ("checklist_fields", Just xs)

-- | /Optional Param/ "organization" -  true or false
instance HasOptionalParam GetBoardsByIdBoard Organization where
  applyOptionalParam req (Organization xs) =
    req `setQuery` toQuery ("organization", Just xs)

-- | /Optional Param/ "organization_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetBoardsByIdBoard OrganizationFields where
  applyOptionalParam req (OrganizationFields xs) =
    req `setQuery` toQuery ("organization_fields", Just xs)

-- | /Optional Param/ "organization_memberships" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetBoardsByIdBoard OrganizationMemberships where
  applyOptionalParam req (OrganizationMemberships xs) =
    req `setQuery` toQuery ("organization_memberships", Just xs)

-- | /Optional Param/ "myPrefs" -  true or false
instance HasOptionalParam GetBoardsByIdBoard MyPrefs where
  applyOptionalParam req (MyPrefs xs) =
    req `setQuery` toQuery ("myPrefs", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetBoardsByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsByIdBoardByField

-- | @GET \/boards\/{idBoard}\/{field}@
-- 
-- getBoardsByIdBoardByField()
-- 
getBoardsByIdBoardByField 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsByIdBoardByField MimeNoContent NoContent MimeNoContent
getBoardsByIdBoardByField (IdBoard idBoard) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsByIdBoardByField  

-- *** getBoardsCardsByIdBoard

-- | @GET \/boards\/{idBoard}\/cards@
-- 
-- getBoardsCardsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsCardsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsCardsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsCardsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsCardsByIdBoard  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetBoardsCardsByIdBoard Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetBoardsCardsByIdBoard Attachments where
  applyOptionalParam req (Attachments xs) =
    req `setQuery` toQuery ("attachments", Just xs)

-- | /Optional Param/ "attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetBoardsCardsByIdBoard AttachmentFields where
  applyOptionalParam req (AttachmentFields xs) =
    req `setQuery` toQuery ("attachment_fields", Just xs)

-- | /Optional Param/ "stickers" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoard Stickers where
  applyOptionalParam req (Stickers xs) =
    req `setQuery` toQuery ("stickers", Just xs)

-- | /Optional Param/ "members" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoard Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsCardsByIdBoard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "checkItemStates" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoard CheckItemStates where
  applyOptionalParam req (CheckItemStates xs) =
    req `setQuery` toQuery ("checkItemStates", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetBoardsCardsByIdBoard Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "limit" - a number from 1 to 1000
instance HasOptionalParam GetBoardsCardsByIdBoard Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "since" - A date, or null
instance HasOptionalParam GetBoardsCardsByIdBoard Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "before" - A date, or null
instance HasOptionalParam GetBoardsCardsByIdBoard Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "filter" - One of: all, closed, none, open or visible
instance HasOptionalParam GetBoardsCardsByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetBoardsCardsByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsCardsByIdBoardByFilter

-- | @GET \/boards\/{idBoard}\/cards\/{filter}@
-- 
-- getBoardsCardsByIdBoardByFilter()
-- 
getBoardsCardsByIdBoardByFilter 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsCardsByIdBoardByFilter MimeNoContent NoContent MimeNoContent
getBoardsCardsByIdBoardByFilter (IdBoard idBoard) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/cards/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsCardsByIdBoardByFilter  

-- *** getBoardsCardsByIdBoardByIdCard

-- | @GET \/boards\/{idBoard}\/cards\/{idCard}@
-- 
-- getBoardsCardsByIdBoardByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsCardsByIdBoardByIdCard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> IdCard -- ^ "idCard" -  idCard
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsCardsByIdBoardByIdCard MimeNoContent NoContent MimeNoContent
getBoardsCardsByIdBoardByIdCard (IdBoard idBoard) (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/cards/",toPath idCard]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsCardsByIdBoardByIdCard  

-- | /Optional Param/ "attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard Attachments where
  applyOptionalParam req (Attachments xs) =
    req `setQuery` toQuery ("attachments", Just xs)

-- | /Optional Param/ "attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard AttachmentFields where
  applyOptionalParam req (AttachmentFields xs) =
    req `setQuery` toQuery ("attachment_fields", Just xs)

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_display" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard ActionsDisplay where
  applyOptionalParam req (ActionsDisplay xs) =
    req `setQuery` toQuery ("actions_display", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "action_memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard ActionMemberCreatorFields where
  applyOptionalParam req (ActionMemberCreatorFields xs) =
    req `setQuery` toQuery ("action_memberCreator_fields", Just xs)

-- | /Optional Param/ "members" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "checkItemStates" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard CheckItemStates where
  applyOptionalParam req (CheckItemStates xs) =
    req `setQuery` toQuery ("checkItemStates", Just xs)

-- | /Optional Param/ "checkItemState_fields" - all or a comma-separated list of: idCheckItem or state
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard CheckItemStateFields where
  applyOptionalParam req (CheckItemStateFields xs) =
    req `setQuery` toQuery ("checkItemState_fields", Just xs)

-- | /Optional Param/ "labels" -  true or false
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard Labels2 where
  applyOptionalParam req (Labels2 xs) =
    req `setQuery` toQuery ("labels", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "checklist_fields" - all or a comma-separated list of: idBoard, idCard, name or pos
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard ChecklistFields where
  applyOptionalParam req (ChecklistFields xs) =
    req `setQuery` toQuery ("checklist_fields", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetBoardsCardsByIdBoardByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsChecklistsByIdBoard

-- | @GET \/boards\/{idBoard}\/checklists@
-- 
-- getBoardsChecklistsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsChecklistsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsChecklistsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsChecklistsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/checklists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsChecklistsByIdBoard  

-- | /Optional Param/ "cards" - One of: all, closed, none, open or visible
instance HasOptionalParam GetBoardsChecklistsByIdBoard Cards2 where
  applyOptionalParam req (Cards2 xs) =
    req `setQuery` toQuery ("cards", Just xs)

-- | /Optional Param/ "card_fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetBoardsChecklistsByIdBoard CardFields where
  applyOptionalParam req (CardFields xs) =
    req `setQuery` toQuery ("card_fields", Just xs)

-- | /Optional Param/ "checkItems" - One of: all or none
instance HasOptionalParam GetBoardsChecklistsByIdBoard CheckItems where
  applyOptionalParam req (CheckItems xs) =
    req `setQuery` toQuery ("checkItems", Just xs)

-- | /Optional Param/ "checkItem_fields" - all or a comma-separated list of: name, nameData, pos, state or type
instance HasOptionalParam GetBoardsChecklistsByIdBoard CheckItemFields where
  applyOptionalParam req (CheckItemFields xs) =
    req `setQuery` toQuery ("checkItem_fields", Just xs)

-- | /Optional Param/ "filter" - One of: all or none
instance HasOptionalParam GetBoardsChecklistsByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: idBoard, idCard, name or pos
instance HasOptionalParam GetBoardsChecklistsByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsDeltasByIdBoard

-- | @GET \/boards\/{idBoard}\/deltas@
-- 
-- getBoardsDeltasByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsDeltasByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Tags -- ^ "tags" -  A valid tag for subscribing
  -> IxLastUpdate -- ^ "ixLastUpdate" -  a number from -1 to Infinity
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsDeltasByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsDeltasByIdBoard (IdBoard idBoard) (Tags tags) (IxLastUpdate ixLastUpdate) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/deltas"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("tags", Just tags)
    `setQuery` toQuery ("ixLastUpdate", Just ixLastUpdate)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsDeltasByIdBoard  

-- *** getBoardsLabelsByIdBoard

-- | @GET \/boards\/{idBoard}\/labels@
-- 
-- getBoardsLabelsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsLabelsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsLabelsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsLabelsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsLabelsByIdBoard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: color, idBoard, name or uses
instance HasOptionalParam GetBoardsLabelsByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "limit" - a number from 0 to 1000
instance HasOptionalParam GetBoardsLabelsByIdBoard Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- *** getBoardsLabelsByIdBoardByIdLabel

-- | @GET \/boards\/{idBoard}\/labels\/{idLabel}@
-- 
-- getBoardsLabelsByIdBoardByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsLabelsByIdBoardByIdLabel 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> IdLabel -- ^ "idLabel" -  idLabel
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsLabelsByIdBoardByIdLabel MimeNoContent NoContent MimeNoContent
getBoardsLabelsByIdBoardByIdLabel (IdBoard idBoard) (IdLabel idLabel) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/labels/",toPath idLabel]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsLabelsByIdBoardByIdLabel  

-- | /Optional Param/ "fields" - all or a comma-separated list of: color, idBoard, name or uses
instance HasOptionalParam GetBoardsLabelsByIdBoardByIdLabel Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsListsByIdBoard

-- | @GET \/boards\/{idBoard}\/lists@
-- 
-- getBoardsListsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsListsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsListsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsListsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/lists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsListsByIdBoard  

-- | /Optional Param/ "cards" - One of: all, closed, none, open or visible
instance HasOptionalParam GetBoardsListsByIdBoard Cards2 where
  applyOptionalParam req (Cards2 xs) =
    req `setQuery` toQuery ("cards", Just xs)

-- | /Optional Param/ "card_fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetBoardsListsByIdBoard CardFields where
  applyOptionalParam req (CardFields xs) =
    req `setQuery` toQuery ("card_fields", Just xs)

-- | /Optional Param/ "filter" - One of: all, closed, none or open
instance HasOptionalParam GetBoardsListsByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetBoardsListsByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsListsByIdBoardByFilter

-- | @GET \/boards\/{idBoard}\/lists\/{filter}@
-- 
-- getBoardsListsByIdBoardByFilter()
-- 
getBoardsListsByIdBoardByFilter 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsListsByIdBoardByFilter MimeNoContent NoContent MimeNoContent
getBoardsListsByIdBoardByFilter (IdBoard idBoard) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/lists/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsListsByIdBoardByFilter  

-- *** getBoardsMembersByIdBoard

-- | @GET \/boards\/{idBoard}\/members@
-- 
-- getBoardsMembersByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMembersByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembersByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsMembersByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembersByIdBoard  

-- | /Optional Param/ "filter" - One of: admins, all, none, normal or owners
instance HasOptionalParam GetBoardsMembersByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsMembersByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "activity" - true or false ; works for premium organizations only.
instance HasOptionalParam GetBoardsMembersByIdBoard Activity where
  applyOptionalParam req (Activity xs) =
    req `setQuery` toQuery ("activity", Just xs)

-- *** getBoardsMembersByIdBoardByFilter

-- | @GET \/boards\/{idBoard}\/members\/{filter}@
-- 
-- getBoardsMembersByIdBoardByFilter()
-- 
getBoardsMembersByIdBoardByFilter 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembersByIdBoardByFilter MimeNoContent NoContent MimeNoContent
getBoardsMembersByIdBoardByFilter (IdBoard idBoard) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/members/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembersByIdBoardByFilter  

-- *** getBoardsMembersCardsByIdBoardByIdMember

-- | @GET \/boards\/{idBoard}\/members\/{idMember}\/cards@
-- 
-- getBoardsMembersCardsByIdBoardByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMembersCardsByIdBoardByIdMember 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembersCardsByIdBoardByIdMember MimeNoContent NoContent MimeNoContent
getBoardsMembersCardsByIdBoardByIdMember (IdBoard idBoard) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/members/",toPath idMember,"/cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembersCardsByIdBoardByIdMember  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Attachments where
  applyOptionalParam req (Attachments xs) =
    req `setQuery` toQuery ("attachments", Just xs)

-- | /Optional Param/ "attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember AttachmentFields where
  applyOptionalParam req (AttachmentFields xs) =
    req `setQuery` toQuery ("attachment_fields", Just xs)

-- | /Optional Param/ "members" -  true or false
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "checkItemStates" -  true or false
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember CheckItemStates where
  applyOptionalParam req (CheckItemStates xs) =
    req `setQuery` toQuery ("checkItemStates", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "board" -  true or false
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Board where
  applyOptionalParam req (Board xs) =
    req `setQuery` toQuery ("board", Just xs)

-- | /Optional Param/ "board_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember BoardFields where
  applyOptionalParam req (BoardFields xs) =
    req `setQuery` toQuery ("board_fields", Just xs)

-- | /Optional Param/ "list" -  true or false
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember ParamList where
  applyOptionalParam req (ParamList xs) =
    req `setQuery` toQuery ("list", Just xs)

-- | /Optional Param/ "list_fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember ListFields where
  applyOptionalParam req (ListFields xs) =
    req `setQuery` toQuery ("list_fields", Just xs)

-- | /Optional Param/ "filter" - One of: all, closed, none, open or visible
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetBoardsMembersCardsByIdBoardByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsMembersInvitedByIdBoard

-- | @GET \/boards\/{idBoard}\/membersInvited@
-- 
-- getBoardsMembersInvitedByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMembersInvitedByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembersInvitedByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsMembersInvitedByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/membersInvited"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembersInvitedByIdBoard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
instance HasOptionalParam GetBoardsMembersInvitedByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsMembersInvitedByIdBoardByField

-- | @GET \/boards\/{idBoard}\/membersInvited\/{field}@
-- 
-- getBoardsMembersInvitedByIdBoardByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMembersInvitedByIdBoardByField 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembersInvitedByIdBoardByField MimeNoContent NoContent MimeNoContent
getBoardsMembersInvitedByIdBoardByField (IdBoard idBoard) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/membersInvited/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembersInvitedByIdBoardByField  

-- *** getBoardsMembershipsByIdBoard

-- | @GET \/boards\/{idBoard}\/memberships@
-- 
-- getBoardsMembershipsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMembershipsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembershipsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsMembershipsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/memberships"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembershipsByIdBoard  

-- | /Optional Param/ "filter" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetBoardsMembershipsByIdBoard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetBoardsMembershipsByIdBoard Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsMembershipsByIdBoard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- *** getBoardsMembershipsByIdBoardByIdMembership

-- | @GET \/boards\/{idBoard}\/memberships\/{idMembership}@
-- 
-- getBoardsMembershipsByIdBoardByIdMembership()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMembershipsByIdBoardByIdMembership 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> IdMembership -- ^ "idMembership" -  idMembership
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMembershipsByIdBoardByIdMembership MimeNoContent NoContent MimeNoContent
getBoardsMembershipsByIdBoardByIdMembership (IdBoard idBoard) (IdMembership idMembership) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/memberships/",toPath idMembership]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMembershipsByIdBoardByIdMembership  

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetBoardsMembershipsByIdBoardByIdMembership Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetBoardsMembershipsByIdBoardByIdMembership MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- *** getBoardsMyPrefsByIdBoard

-- | @GET \/boards\/{idBoard}\/myPrefs@
-- 
-- getBoardsMyPrefsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsMyPrefsByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsMyPrefsByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsMyPrefsByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/myPrefs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsMyPrefsByIdBoard  

-- *** getBoardsOrganizationByIdBoard

-- | @GET \/boards\/{idBoard}\/organization@
-- 
-- getBoardsOrganizationByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsOrganizationByIdBoard 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsOrganizationByIdBoard MimeNoContent NoContent MimeNoContent
getBoardsOrganizationByIdBoard (IdBoard idBoard) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/organization"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsOrganizationByIdBoard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetBoardsOrganizationByIdBoard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getBoardsOrganizationByIdBoardByField

-- | @GET \/boards\/{idBoard}\/organization\/{field}@
-- 
-- getBoardsOrganizationByIdBoardByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getBoardsOrganizationByIdBoardByField 
  :: IdBoard -- ^ "idBoard" -  board_id
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetBoardsOrganizationByIdBoardByField MimeNoContent NoContent MimeNoContent
getBoardsOrganizationByIdBoardByField (IdBoard idBoard) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/boards/",toPath idBoard,"/organization/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetBoardsOrganizationByIdBoardByField  

-- *** updateBoardsByIdBoard

-- | @PUT \/boards\/{idBoard}@
-- 
-- updateBoardsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsByIdBoard 
  :: (Consumes UpdateBoardsByIdBoard contentType, MimeRender contentType Boards)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> Boards -- ^ "body" -  Attributes of \"Boards\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsByIdBoard contentType NoContent MimeNoContent
updateBoardsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards\" to be updated.
instance HasBodyParam UpdateBoardsByIdBoard Boards 

-- *** updateBoardsClosedByIdBoard

-- | @PUT \/boards\/{idBoard}\/closed@
-- 
-- updateBoardsClosedByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsClosedByIdBoard 
  :: (Consumes UpdateBoardsClosedByIdBoard contentType, MimeRender contentType BoardsClosed)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsClosed -- ^ "body" -  Attributes of \"Boards Closed\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsClosedByIdBoard contentType NoContent MimeNoContent
updateBoardsClosedByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/closed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsClosedByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Closed\" to be updated.
instance HasBodyParam UpdateBoardsClosedByIdBoard BoardsClosed 

-- *** updateBoardsDescByIdBoard

-- | @PUT \/boards\/{idBoard}\/desc@
-- 
-- updateBoardsDescByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsDescByIdBoard 
  :: (Consumes UpdateBoardsDescByIdBoard contentType, MimeRender contentType BoardsDesc)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsDesc -- ^ "body" -  Attributes of \"Boards Desc\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsDescByIdBoard contentType NoContent MimeNoContent
updateBoardsDescByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/desc"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsDescByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Desc\" to be updated.
instance HasBodyParam UpdateBoardsDescByIdBoard BoardsDesc 

-- *** updateBoardsIdOrganizationByIdBoard

-- | @PUT \/boards\/{idBoard}\/idOrganization@
-- 
-- updateBoardsIdOrganizationByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsIdOrganizationByIdBoard 
  :: (Consumes UpdateBoardsIdOrganizationByIdBoard contentType, MimeRender contentType BoardsIdOrganization)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsIdOrganization -- ^ "body" -  Attributes of \"Boards Id Organization\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsIdOrganizationByIdBoard contentType NoContent MimeNoContent
updateBoardsIdOrganizationByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/idOrganization"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsIdOrganizationByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Id Organization\" to be updated.
instance HasBodyParam UpdateBoardsIdOrganizationByIdBoard BoardsIdOrganization 

-- *** updateBoardsLabelNamesBlueByIdBoard

-- | @PUT \/boards\/{idBoard}\/labelNames\/blue@
-- 
-- updateBoardsLabelNamesBlueByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsLabelNamesBlueByIdBoard 
  :: (Consumes UpdateBoardsLabelNamesBlueByIdBoard contentType, MimeRender contentType LabelNamesBlue)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> LabelNamesBlue -- ^ "body" -  Attributes of \"Label Names Blue\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsLabelNamesBlueByIdBoard contentType NoContent MimeNoContent
updateBoardsLabelNamesBlueByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/labelNames/blue"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsLabelNamesBlueByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Label Names Blue\" to be updated.
instance HasBodyParam UpdateBoardsLabelNamesBlueByIdBoard LabelNamesBlue 

-- *** updateBoardsLabelNamesGreenByIdBoard

-- | @PUT \/boards\/{idBoard}\/labelNames\/green@
-- 
-- updateBoardsLabelNamesGreenByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsLabelNamesGreenByIdBoard 
  :: (Consumes UpdateBoardsLabelNamesGreenByIdBoard contentType, MimeRender contentType LabelNamesGreen)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> LabelNamesGreen -- ^ "body" -  Attributes of \"Label Names Green\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsLabelNamesGreenByIdBoard contentType NoContent MimeNoContent
updateBoardsLabelNamesGreenByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/labelNames/green"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsLabelNamesGreenByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Label Names Green\" to be updated.
instance HasBodyParam UpdateBoardsLabelNamesGreenByIdBoard LabelNamesGreen 

-- *** updateBoardsLabelNamesOrangeByIdBoard

-- | @PUT \/boards\/{idBoard}\/labelNames\/orange@
-- 
-- updateBoardsLabelNamesOrangeByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsLabelNamesOrangeByIdBoard 
  :: (Consumes UpdateBoardsLabelNamesOrangeByIdBoard contentType, MimeRender contentType LabelNamesOrange)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> LabelNamesOrange -- ^ "body" -  Attributes of \"Label Names Orange\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsLabelNamesOrangeByIdBoard contentType NoContent MimeNoContent
updateBoardsLabelNamesOrangeByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/labelNames/orange"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsLabelNamesOrangeByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Label Names Orange\" to be updated.
instance HasBodyParam UpdateBoardsLabelNamesOrangeByIdBoard LabelNamesOrange 

-- *** updateBoardsLabelNamesPurpleByIdBoard

-- | @PUT \/boards\/{idBoard}\/labelNames\/purple@
-- 
-- updateBoardsLabelNamesPurpleByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsLabelNamesPurpleByIdBoard 
  :: (Consumes UpdateBoardsLabelNamesPurpleByIdBoard contentType, MimeRender contentType LabelNamesPurple)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> LabelNamesPurple -- ^ "body" -  Attributes of \"Label Names Purple\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsLabelNamesPurpleByIdBoard contentType NoContent MimeNoContent
updateBoardsLabelNamesPurpleByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/labelNames/purple"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsLabelNamesPurpleByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Label Names Purple\" to be updated.
instance HasBodyParam UpdateBoardsLabelNamesPurpleByIdBoard LabelNamesPurple 

-- *** updateBoardsLabelNamesRedByIdBoard

-- | @PUT \/boards\/{idBoard}\/labelNames\/red@
-- 
-- updateBoardsLabelNamesRedByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsLabelNamesRedByIdBoard 
  :: (Consumes UpdateBoardsLabelNamesRedByIdBoard contentType, MimeRender contentType LabelNamesRed)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> LabelNamesRed -- ^ "body" -  Attributes of \"Label Names Red\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsLabelNamesRedByIdBoard contentType NoContent MimeNoContent
updateBoardsLabelNamesRedByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/labelNames/red"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsLabelNamesRedByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Label Names Red\" to be updated.
instance HasBodyParam UpdateBoardsLabelNamesRedByIdBoard LabelNamesRed 

-- *** updateBoardsLabelNamesYellowByIdBoard

-- | @PUT \/boards\/{idBoard}\/labelNames\/yellow@
-- 
-- updateBoardsLabelNamesYellowByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsLabelNamesYellowByIdBoard 
  :: (Consumes UpdateBoardsLabelNamesYellowByIdBoard contentType, MimeRender contentType LabelNamesYellow)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> LabelNamesYellow -- ^ "body" -  Attributes of \"Label Names Yellow\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsLabelNamesYellowByIdBoard contentType NoContent MimeNoContent
updateBoardsLabelNamesYellowByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/labelNames/yellow"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsLabelNamesYellowByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Label Names Yellow\" to be updated.
instance HasBodyParam UpdateBoardsLabelNamesYellowByIdBoard LabelNamesYellow 

-- *** updateBoardsMembersByIdBoard

-- | @PUT \/boards\/{idBoard}\/members@
-- 
-- updateBoardsMembersByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMembersByIdBoard 
  :: (Consumes UpdateBoardsMembersByIdBoard contentType, MimeRender contentType BoardsMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsMembers -- ^ "body" -  Attributes of \"Boards Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMembersByIdBoard contentType NoContent MimeNoContent
updateBoardsMembersByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMembersByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Members\" to be updated.
instance HasBodyParam UpdateBoardsMembersByIdBoard BoardsMembers 

-- *** updateBoardsMembersByIdBoardByIdMember

-- | @PUT \/boards\/{idBoard}\/members\/{idMember}@
-- 
-- updateBoardsMembersByIdBoardByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMembersByIdBoardByIdMember 
  :: (Consumes UpdateBoardsMembersByIdBoardByIdMember contentType, MimeRender contentType BoardsMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> IdMember -- ^ "idMember" -  idMember
  -> BoardsMembers -- ^ "body" -  Attributes of \"Boards Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMembersByIdBoardByIdMember contentType NoContent MimeNoContent
updateBoardsMembersByIdBoardByIdMember _ (IdBoard idBoard) (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/members/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMembersByIdBoardByIdMember 

-- | /Body Param/ "body" - Attributes of \"Boards Members\" to be updated.
instance HasBodyParam UpdateBoardsMembersByIdBoardByIdMember BoardsMembers 

-- *** updateBoardsMembershipsByIdBoardByIdMembership

-- | @PUT \/boards\/{idBoard}\/memberships\/{idMembership}@
-- 
-- updateBoardsMembershipsByIdBoardByIdMembership()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMembershipsByIdBoardByIdMembership 
  :: (Consumes UpdateBoardsMembershipsByIdBoardByIdMembership contentType, MimeRender contentType BoardsMemberships)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> IdMembership -- ^ "idMembership" -  idMembership
  -> BoardsMemberships -- ^ "body" -  Attributes of \"Boards Memberships\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMembershipsByIdBoardByIdMembership contentType NoContent MimeNoContent
updateBoardsMembershipsByIdBoardByIdMembership _ (IdBoard idBoard) (IdMembership idMembership) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/memberships/",toPath idMembership]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMembershipsByIdBoardByIdMembership 

-- | /Body Param/ "body" - Attributes of \"Boards Memberships\" to be updated.
instance HasBodyParam UpdateBoardsMembershipsByIdBoardByIdMembership BoardsMemberships 

-- *** updateBoardsMyPrefsEmailPositionByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/emailPosition@
-- 
-- updateBoardsMyPrefsEmailPositionByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsEmailPositionByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsEmailPositionByIdBoard contentType, MimeRender contentType MyPrefsEmailPosition)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsEmailPosition -- ^ "body" -  Attributes of \"My Prefs Email Position\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsEmailPositionByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsEmailPositionByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/emailPosition"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsEmailPositionByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Email Position\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsEmailPositionByIdBoard MyPrefsEmailPosition 

-- *** updateBoardsMyPrefsIdEmailListByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/idEmailList@
-- 
-- updateBoardsMyPrefsIdEmailListByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsIdEmailListByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsIdEmailListByIdBoard contentType, MimeRender contentType MyPrefsIdEmailList)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsIdEmailList -- ^ "body" -  Attributes of \"My Prefs Id Email List\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsIdEmailListByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsIdEmailListByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/idEmailList"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsIdEmailListByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Id Email List\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsIdEmailListByIdBoard MyPrefsIdEmailList 

-- *** updateBoardsMyPrefsShowListGuideByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/showListGuide@
-- 
-- updateBoardsMyPrefsShowListGuideByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsShowListGuideByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsShowListGuideByIdBoard contentType, MimeRender contentType MyPrefsShowListGuide)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsShowListGuide -- ^ "body" -  Attributes of \"My Prefs Show List Guide\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsShowListGuideByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsShowListGuideByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/showListGuide"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsShowListGuideByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Show List Guide\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsShowListGuideByIdBoard MyPrefsShowListGuide 

-- *** updateBoardsMyPrefsShowSidebarActivityByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/showSidebarActivity@
-- 
-- updateBoardsMyPrefsShowSidebarActivityByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsShowSidebarActivityByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsShowSidebarActivityByIdBoard contentType, MimeRender contentType MyPrefsShowSidebarActivity)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsShowSidebarActivity -- ^ "body" -  Attributes of \"My Prefs Show Sidebar Activity\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsShowSidebarActivityByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsShowSidebarActivityByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/showSidebarActivity"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsShowSidebarActivityByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Show Sidebar Activity\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsShowSidebarActivityByIdBoard MyPrefsShowSidebarActivity 

-- *** updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/showSidebarBoardActions@
-- 
-- updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsShowSidebarBoardActionsByIdBoard contentType, MimeRender contentType MyPrefsShowSidebarBoardActions)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsShowSidebarBoardActions -- ^ "body" -  Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsShowSidebarBoardActionsByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/showSidebarBoardActions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsShowSidebarBoardActionsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Show Sidebar Board Actions\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsShowSidebarBoardActionsByIdBoard MyPrefsShowSidebarBoardActions 

-- *** updateBoardsMyPrefsShowSidebarByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/showSidebar@
-- 
-- updateBoardsMyPrefsShowSidebarByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsShowSidebarByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsShowSidebarByIdBoard contentType, MimeRender contentType MyPrefsShowSidebar)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsShowSidebar -- ^ "body" -  Attributes of \"My Prefs Show Sidebar\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsShowSidebarByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsShowSidebarByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/showSidebar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsShowSidebarByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Show Sidebar\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsShowSidebarByIdBoard MyPrefsShowSidebar 

-- *** updateBoardsMyPrefsShowSidebarMembersByIdBoard

-- | @PUT \/boards\/{idBoard}\/myPrefs\/showSidebarMembers@
-- 
-- updateBoardsMyPrefsShowSidebarMembersByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsMyPrefsShowSidebarMembersByIdBoard 
  :: (Consumes UpdateBoardsMyPrefsShowSidebarMembersByIdBoard contentType, MimeRender contentType MyPrefsShowSidebarMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> MyPrefsShowSidebarMembers -- ^ "body" -  Attributes of \"My Prefs Show Sidebar Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsMyPrefsShowSidebarMembersByIdBoard contentType NoContent MimeNoContent
updateBoardsMyPrefsShowSidebarMembersByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/myPrefs/showSidebarMembers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsMyPrefsShowSidebarMembersByIdBoard 

-- | /Body Param/ "body" - Attributes of \"My Prefs Show Sidebar Members\" to be updated.
instance HasBodyParam UpdateBoardsMyPrefsShowSidebarMembersByIdBoard MyPrefsShowSidebarMembers 

-- *** updateBoardsNameByIdBoard

-- | @PUT \/boards\/{idBoard}\/name@
-- 
-- updateBoardsNameByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsNameByIdBoard 
  :: (Consumes UpdateBoardsNameByIdBoard contentType, MimeRender contentType BoardsName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsName -- ^ "body" -  Attributes of \"Boards Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsNameByIdBoard contentType NoContent MimeNoContent
updateBoardsNameByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/name"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsNameByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Name\" to be updated.
instance HasBodyParam UpdateBoardsNameByIdBoard BoardsName 

-- *** updateBoardsPrefsBackgroundByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/background@
-- 
-- updateBoardsPrefsBackgroundByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsBackgroundByIdBoard 
  :: (Consumes UpdateBoardsPrefsBackgroundByIdBoard contentType, MimeRender contentType PrefsBackground)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsBackground -- ^ "body" -  Attributes of \"Prefs Background\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsBackgroundByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsBackgroundByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/background"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsBackgroundByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Background\" to be updated.
instance HasBodyParam UpdateBoardsPrefsBackgroundByIdBoard PrefsBackground 

-- *** updateBoardsPrefsCalendarFeedEnabledByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/calendarFeedEnabled@
-- 
-- updateBoardsPrefsCalendarFeedEnabledByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsCalendarFeedEnabledByIdBoard 
  :: (Consumes UpdateBoardsPrefsCalendarFeedEnabledByIdBoard contentType, MimeRender contentType PrefsCalendarFeedEnabled)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsCalendarFeedEnabled -- ^ "body" -  Attributes of \"Prefs Calendar Feed Enabled\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsCalendarFeedEnabledByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsCalendarFeedEnabledByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/calendarFeedEnabled"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsCalendarFeedEnabledByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Calendar Feed Enabled\" to be updated.
instance HasBodyParam UpdateBoardsPrefsCalendarFeedEnabledByIdBoard PrefsCalendarFeedEnabled 

-- *** updateBoardsPrefsCardAgingByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/cardAging@
-- 
-- updateBoardsPrefsCardAgingByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsCardAgingByIdBoard 
  :: (Consumes UpdateBoardsPrefsCardAgingByIdBoard contentType, MimeRender contentType PrefsCardAging)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsCardAging -- ^ "body" -  Attributes of \"Prefs Card Aging\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsCardAgingByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsCardAgingByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/cardAging"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsCardAgingByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Card Aging\" to be updated.
instance HasBodyParam UpdateBoardsPrefsCardAgingByIdBoard PrefsCardAging 

-- *** updateBoardsPrefsCardCoversByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/cardCovers@
-- 
-- updateBoardsPrefsCardCoversByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsCardCoversByIdBoard 
  :: (Consumes UpdateBoardsPrefsCardCoversByIdBoard contentType, MimeRender contentType PrefsCardCovers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsCardCovers -- ^ "body" -  Attributes of \"Prefs Card Covers\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsCardCoversByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsCardCoversByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/cardCovers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsCardCoversByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Card Covers\" to be updated.
instance HasBodyParam UpdateBoardsPrefsCardCoversByIdBoard PrefsCardCovers 

-- *** updateBoardsPrefsCommentsByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/comments@
-- 
-- updateBoardsPrefsCommentsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsCommentsByIdBoard 
  :: (Consumes UpdateBoardsPrefsCommentsByIdBoard contentType, MimeRender contentType PrefsComments)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsComments -- ^ "body" -  Attributes of \"Prefs Comments\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsCommentsByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsCommentsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsCommentsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Comments\" to be updated.
instance HasBodyParam UpdateBoardsPrefsCommentsByIdBoard PrefsComments 

-- *** updateBoardsPrefsInvitationsByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/invitations@
-- 
-- updateBoardsPrefsInvitationsByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsInvitationsByIdBoard 
  :: (Consumes UpdateBoardsPrefsInvitationsByIdBoard contentType, MimeRender contentType PrefsInvitations)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsInvitations -- ^ "body" -  Attributes of \"Prefs Invitations\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsInvitationsByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsInvitationsByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/invitations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsInvitationsByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Invitations\" to be updated.
instance HasBodyParam UpdateBoardsPrefsInvitationsByIdBoard PrefsInvitations 

-- *** updateBoardsPrefsPermissionLevelByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/permissionLevel@
-- 
-- updateBoardsPrefsPermissionLevelByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsPermissionLevelByIdBoard 
  :: (Consumes UpdateBoardsPrefsPermissionLevelByIdBoard contentType, MimeRender contentType PrefsPermissionLevel)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsPermissionLevel -- ^ "body" -  Attributes of \"Prefs Permission Level\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsPermissionLevelByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsPermissionLevelByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/permissionLevel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsPermissionLevelByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Permission Level\" to be updated.
instance HasBodyParam UpdateBoardsPrefsPermissionLevelByIdBoard PrefsPermissionLevel 

-- *** updateBoardsPrefsSelfJoinByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/selfJoin@
-- 
-- updateBoardsPrefsSelfJoinByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsSelfJoinByIdBoard 
  :: (Consumes UpdateBoardsPrefsSelfJoinByIdBoard contentType, MimeRender contentType PrefsSelfJoin)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsSelfJoin -- ^ "body" -  Attributes of \"Prefs Self Join\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsSelfJoinByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsSelfJoinByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/selfJoin"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsSelfJoinByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Self Join\" to be updated.
instance HasBodyParam UpdateBoardsPrefsSelfJoinByIdBoard PrefsSelfJoin 

-- *** updateBoardsPrefsVotingByIdBoard

-- | @PUT \/boards\/{idBoard}\/prefs\/voting@
-- 
-- updateBoardsPrefsVotingByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsPrefsVotingByIdBoard 
  :: (Consumes UpdateBoardsPrefsVotingByIdBoard contentType, MimeRender contentType PrefsVoting)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> PrefsVoting -- ^ "body" -  Attributes of \"Prefs Voting\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsPrefsVotingByIdBoard contentType NoContent MimeNoContent
updateBoardsPrefsVotingByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/prefs/voting"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsPrefsVotingByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Prefs Voting\" to be updated.
instance HasBodyParam UpdateBoardsPrefsVotingByIdBoard PrefsVoting 

-- *** updateBoardsSubscribedByIdBoard

-- | @PUT \/boards\/{idBoard}\/subscribed@
-- 
-- updateBoardsSubscribedByIdBoard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateBoardsSubscribedByIdBoard 
  :: (Consumes UpdateBoardsSubscribedByIdBoard contentType, MimeRender contentType BoardsSubscribed)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdBoard -- ^ "idBoard" -  board_id
  -> BoardsSubscribed -- ^ "body" -  Attributes of \"Boards Subscribed\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateBoardsSubscribedByIdBoard contentType NoContent MimeNoContent
updateBoardsSubscribedByIdBoard _ (IdBoard idBoard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/boards/",toPath idBoard,"/subscribed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateBoardsSubscribedByIdBoard 

-- | /Body Param/ "body" - Attributes of \"Boards Subscribed\" to be updated.
instance HasBodyParam UpdateBoardsSubscribedByIdBoard BoardsSubscribed 
