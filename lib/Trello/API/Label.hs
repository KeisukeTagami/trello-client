{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Label
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Label where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Label

-- *** addLabels

-- | @POST \/labels@
-- 
-- addLabels()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addLabels 
  :: (Consumes AddLabels contentType, MimeRender contentType Labels)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Labels -- ^ "body" -  Attributes of \"Labels\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddLabels contentType NoContent MimeNoContent
addLabels _ body (Key key) (Token token) =
  _mkRequest "POST" ["/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddLabels 

-- | /Body Param/ "body" - Attributes of \"Labels\" to be added.
instance HasBodyParam AddLabels Labels 

-- *** deleteLabelsByIdLabel

-- | @DELETE \/labels\/{idLabel}@
-- 
-- deleteLabelsByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteLabelsByIdLabel 
  :: IdLabel -- ^ "idLabel" -  idLabel
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteLabelsByIdLabel MimeNoContent NoContent MimeNoContent
deleteLabelsByIdLabel (IdLabel idLabel) (Key key) (Token token) =
  _mkRequest "DELETE" ["/labels/",toPath idLabel]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteLabelsByIdLabel  

-- *** getLabelsBoardByIdLabel

-- | @GET \/labels\/{idLabel}\/board@
-- 
-- getLabelsBoardByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getLabelsBoardByIdLabel 
  :: IdLabel -- ^ "idLabel" -  idLabel
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetLabelsBoardByIdLabel MimeNoContent NoContent MimeNoContent
getLabelsBoardByIdLabel (IdLabel idLabel) (Key key) (Token token) =
  _mkRequest "GET" ["/labels/",toPath idLabel,"/board"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetLabelsBoardByIdLabel  

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetLabelsBoardByIdLabel Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getLabelsBoardByIdLabelByField

-- | @GET \/labels\/{idLabel}\/board\/{field}@
-- 
-- getLabelsBoardByIdLabelByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getLabelsBoardByIdLabelByField 
  :: IdLabel -- ^ "idLabel" -  idLabel
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetLabelsBoardByIdLabelByField MimeNoContent NoContent MimeNoContent
getLabelsBoardByIdLabelByField (IdLabel idLabel) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/labels/",toPath idLabel,"/board/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetLabelsBoardByIdLabelByField  

-- *** getLabelsByIdLabel

-- | @GET \/labels\/{idLabel}@
-- 
-- getLabelsByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getLabelsByIdLabel 
  :: IdLabel -- ^ "idLabel" -  idLabel
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetLabelsByIdLabel MimeNoContent NoContent MimeNoContent
getLabelsByIdLabel (IdLabel idLabel) (Key key) (Token token) =
  _mkRequest "GET" ["/labels/",toPath idLabel]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetLabelsByIdLabel  

-- | /Optional Param/ "fields" - all or a comma-separated list of: color, idBoard, name or uses
instance HasOptionalParam GetLabelsByIdLabel Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** updateLabelsByIdLabel

-- | @PUT \/labels\/{idLabel}@
-- 
-- updateLabelsByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateLabelsByIdLabel 
  :: (Consumes UpdateLabelsByIdLabel contentType, MimeRender contentType Labels)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdLabel -- ^ "idLabel" -  idLabel
  -> Labels -- ^ "body" -  Attributes of \"Labels\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateLabelsByIdLabel contentType NoContent MimeNoContent
updateLabelsByIdLabel _ (IdLabel idLabel) body (Key key) (Token token) =
  _mkRequest "PUT" ["/labels/",toPath idLabel]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateLabelsByIdLabel 

-- | /Body Param/ "body" - Attributes of \"Labels\" to be updated.
instance HasBodyParam UpdateLabelsByIdLabel Labels 

-- *** updateLabelsColorByIdLabel

-- | @PUT \/labels\/{idLabel}\/color@
-- 
-- updateLabelsColorByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateLabelsColorByIdLabel 
  :: (Consumes UpdateLabelsColorByIdLabel contentType, MimeRender contentType LabelsColor)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdLabel -- ^ "idLabel" -  idLabel
  -> LabelsColor -- ^ "body" -  Attributes of \"Labels Color\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateLabelsColorByIdLabel contentType NoContent MimeNoContent
updateLabelsColorByIdLabel _ (IdLabel idLabel) body (Key key) (Token token) =
  _mkRequest "PUT" ["/labels/",toPath idLabel,"/color"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateLabelsColorByIdLabel 

-- | /Body Param/ "body" - Attributes of \"Labels Color\" to be updated.
instance HasBodyParam UpdateLabelsColorByIdLabel LabelsColor 

-- *** updateLabelsNameByIdLabel

-- | @PUT \/labels\/{idLabel}\/name@
-- 
-- updateLabelsNameByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateLabelsNameByIdLabel 
  :: (Consumes UpdateLabelsNameByIdLabel contentType, MimeRender contentType LabelsName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdLabel -- ^ "idLabel" -  idLabel
  -> LabelsName -- ^ "body" -  Attributes of \"Labels Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateLabelsNameByIdLabel contentType NoContent MimeNoContent
updateLabelsNameByIdLabel _ (IdLabel idLabel) body (Key key) (Token token) =
  _mkRequest "PUT" ["/labels/",toPath idLabel,"/name"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateLabelsNameByIdLabel 

-- | /Body Param/ "body" - Attributes of \"Labels Name\" to be updated.
instance HasBodyParam UpdateLabelsNameByIdLabel LabelsName 
