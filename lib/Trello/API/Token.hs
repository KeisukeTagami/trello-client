{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Token
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Token where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Token

-- *** addTokensWebhooksByToken

-- | @POST \/tokens\/{token}\/webhooks@
-- 
-- addTokensWebhooksByToken()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addTokensWebhooksByToken 
  :: (Consumes AddTokensWebhooksByToken contentType, MimeRender contentType TokensWebhooks)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Token -- ^ "token" -  token
  -> TokensWebhooks -- ^ "body" -  Attributes of \"Tokens Webhooks\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddTokensWebhooksByToken contentType NoContent MimeNoContent
addTokensWebhooksByToken _ (Token token) body (Key key) (Token2 token2) =
  _mkRequest "POST" ["/tokens/",toPath token,"/webhooks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data AddTokensWebhooksByToken 

-- | /Body Param/ "body" - Attributes of \"Tokens Webhooks\" to be added.
instance HasBodyParam AddTokensWebhooksByToken TokensWebhooks 

-- *** deleteTokensByToken

-- | @DELETE \/tokens\/{token}@
-- 
-- deleteTokensByToken()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteTokensByToken 
  :: Token -- ^ "token" -  token
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteTokensByToken MimeNoContent NoContent MimeNoContent
deleteTokensByToken (Token token) (Key key) (Token2 token2) =
  _mkRequest "DELETE" ["/tokens/",toPath token]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data DeleteTokensByToken  

-- *** deleteTokensWebhooksByTokenByIdWebhook

-- | @DELETE \/tokens\/{token}\/webhooks\/{idWebhook}@
-- 
-- deleteTokensWebhooksByTokenByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteTokensWebhooksByTokenByIdWebhook 
  :: Token -- ^ "token" -  token
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteTokensWebhooksByTokenByIdWebhook MimeNoContent NoContent MimeNoContent
deleteTokensWebhooksByTokenByIdWebhook (Token token) (IdWebhook idWebhook) (Key key) (Token2 token2) =
  _mkRequest "DELETE" ["/tokens/",toPath token,"/webhooks/",toPath idWebhook]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data DeleteTokensWebhooksByTokenByIdWebhook  

-- *** getTokensByToken

-- | @GET \/tokens\/{token}@
-- 
-- getTokensByToken()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getTokensByToken 
  :: Token -- ^ "token" -  token
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetTokensByToken MimeNoContent NoContent MimeNoContent
getTokensByToken (Token token) (Key key) (Token2 token2) =
  _mkRequest "GET" ["/tokens/",toPath token]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data GetTokensByToken  

-- | /Optional Param/ "fields" - all or a comma-separated list of: dateCreated, dateExpires, idMember, identifier or permissions
instance HasOptionalParam GetTokensByToken Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "webhooks" -  true or false
instance HasOptionalParam GetTokensByToken Webhooks2 where
  applyOptionalParam req (Webhooks2 xs) =
    req `setQuery` toQuery ("webhooks", Just xs)

-- *** getTokensByTokenByField

-- | @GET \/tokens\/{token}\/{field}@
-- 
-- getTokensByTokenByField()
-- 
getTokensByTokenByField 
  :: Token -- ^ "token" -  token
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetTokensByTokenByField MimeNoContent NoContent MimeNoContent
getTokensByTokenByField (Token token) (Field field) (Key key) (Token2 token2) =
  _mkRequest "GET" ["/tokens/",toPath token,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data GetTokensByTokenByField  

-- *** getTokensMemberByToken

-- | @GET \/tokens\/{token}\/member@
-- 
-- getTokensMemberByToken()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getTokensMemberByToken 
  :: Token -- ^ "token" -  token
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetTokensMemberByToken MimeNoContent NoContent MimeNoContent
getTokensMemberByToken (Token token) (Key key) (Token2 token2) =
  _mkRequest "GET" ["/tokens/",toPath token,"/member"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data GetTokensMemberByToken  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
instance HasOptionalParam GetTokensMemberByToken Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getTokensMemberByTokenByField

-- | @GET \/tokens\/{token}\/member\/{field}@
-- 
-- getTokensMemberByTokenByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getTokensMemberByTokenByField 
  :: Token -- ^ "token" -  token
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetTokensMemberByTokenByField MimeNoContent NoContent MimeNoContent
getTokensMemberByTokenByField (Token token) (Field field) (Key key) (Token2 token2) =
  _mkRequest "GET" ["/tokens/",toPath token,"/member/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data GetTokensMemberByTokenByField  

-- *** getTokensWebhooksByToken

-- | @GET \/tokens\/{token}\/webhooks@
-- 
-- getTokensWebhooksByToken()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getTokensWebhooksByToken 
  :: Token -- ^ "token" -  token
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetTokensWebhooksByToken MimeNoContent NoContent MimeNoContent
getTokensWebhooksByToken (Token token) (Key key) (Token2 token2) =
  _mkRequest "GET" ["/tokens/",toPath token,"/webhooks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data GetTokensWebhooksByToken  

-- *** getTokensWebhooksByTokenByIdWebhook

-- | @GET \/tokens\/{token}\/webhooks\/{idWebhook}@
-- 
-- getTokensWebhooksByTokenByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getTokensWebhooksByTokenByIdWebhook 
  :: Token -- ^ "token" -  token
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetTokensWebhooksByTokenByIdWebhook MimeNoContent NoContent MimeNoContent
getTokensWebhooksByTokenByIdWebhook (Token token) (IdWebhook idWebhook) (Key key) (Token2 token2) =
  _mkRequest "GET" ["/tokens/",toPath token,"/webhooks/",toPath idWebhook]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data GetTokensWebhooksByTokenByIdWebhook  

-- *** updateTokensWebhooksByToken

-- | @PUT \/tokens\/{token}\/webhooks@
-- 
-- updateTokensWebhooksByToken()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateTokensWebhooksByToken 
  :: (Consumes UpdateTokensWebhooksByToken contentType, MimeRender contentType TokensWebhooks)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Token -- ^ "token" -  token
  -> TokensWebhooks -- ^ "body" -  Attributes of \"Tokens Webhooks\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token2 -- ^ "token2" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateTokensWebhooksByToken contentType NoContent MimeNoContent
updateTokensWebhooksByToken _ (Token token) body (Key key) (Token2 token2) =
  _mkRequest "PUT" ["/tokens/",toPath token,"/webhooks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token2)

data UpdateTokensWebhooksByToken 

-- | /Body Param/ "body" - Attributes of \"Tokens Webhooks\" to be updated.
instance HasBodyParam UpdateTokensWebhooksByToken TokensWebhooks 
