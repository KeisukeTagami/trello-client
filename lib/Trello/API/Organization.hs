{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Organization
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Organization where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Organization

-- *** addOrganizations

-- | @POST \/organizations@
-- 
-- addOrganizations()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addOrganizations 
  :: (Consumes AddOrganizations contentType, MimeRender contentType Organizations)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Organizations -- ^ "body" -  Attributes of \"Organizations\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddOrganizations contentType NoContent MimeNoContent
addOrganizations _ body (Key key) (Token token) =
  _mkRequest "POST" ["/organizations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddOrganizations 

-- | /Body Param/ "body" - Attributes of \"Organizations\" to be added.
instance HasBodyParam AddOrganizations Organizations 

-- *** addOrganizationsLogoByIdOrg

-- | @POST \/organizations\/{idOrg}\/logo@
-- 
-- addOrganizationsLogoByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addOrganizationsLogoByIdOrg 
  :: (Consumes AddOrganizationsLogoByIdOrg contentType, MimeRender contentType OrganizationsLogo)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> OrganizationsLogo -- ^ "body" -  Attributes of \"Organizations Logo\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddOrganizationsLogoByIdOrg contentType NoContent MimeNoContent
addOrganizationsLogoByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "POST" ["/organizations/",toPath idOrg,"/logo"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddOrganizationsLogoByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations Logo\" to be added.
instance HasBodyParam AddOrganizationsLogoByIdOrg OrganizationsLogo 

-- *** deleteOrganizationsByIdOrg

-- | @DELETE \/organizations\/{idOrg}@
-- 
-- deleteOrganizationsByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteOrganizationsByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteOrganizationsByIdOrg MimeNoContent NoContent MimeNoContent
deleteOrganizationsByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "DELETE" ["/organizations/",toPath idOrg]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteOrganizationsByIdOrg  

-- *** deleteOrganizationsLogoByIdOrg

-- | @DELETE \/organizations\/{idOrg}\/logo@
-- 
-- deleteOrganizationsLogoByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteOrganizationsLogoByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteOrganizationsLogoByIdOrg MimeNoContent NoContent MimeNoContent
deleteOrganizationsLogoByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "DELETE" ["/organizations/",toPath idOrg,"/logo"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteOrganizationsLogoByIdOrg  

-- *** deleteOrganizationsMembersAllByIdOrgByIdMember

-- | @DELETE \/organizations\/{idOrg}\/members\/{idMember}\/all@
-- 
-- deleteOrganizationsMembersAllByIdOrgByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteOrganizationsMembersAllByIdOrgByIdMember 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteOrganizationsMembersAllByIdOrgByIdMember MimeNoContent NoContent MimeNoContent
deleteOrganizationsMembersAllByIdOrgByIdMember (IdOrg idOrg) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "DELETE" ["/organizations/",toPath idOrg,"/members/",toPath idMember,"/all"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteOrganizationsMembersAllByIdOrgByIdMember  

-- *** deleteOrganizationsMembersByIdOrgByIdMember

-- | @DELETE \/organizations\/{idOrg}\/members\/{idMember}@
-- 
-- deleteOrganizationsMembersByIdOrgByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteOrganizationsMembersByIdOrgByIdMember 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteOrganizationsMembersByIdOrgByIdMember MimeNoContent NoContent MimeNoContent
deleteOrganizationsMembersByIdOrgByIdMember (IdOrg idOrg) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "DELETE" ["/organizations/",toPath idOrg,"/members/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteOrganizationsMembersByIdOrgByIdMember  

-- *** deleteOrganizationsPrefsAssociatedDomainByIdOrg

-- | @DELETE \/organizations\/{idOrg}\/prefs\/associatedDomain@
-- 
-- deleteOrganizationsPrefsAssociatedDomainByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteOrganizationsPrefsAssociatedDomainByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteOrganizationsPrefsAssociatedDomainByIdOrg MimeNoContent NoContent MimeNoContent
deleteOrganizationsPrefsAssociatedDomainByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "DELETE" ["/organizations/",toPath idOrg,"/prefs/associatedDomain"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteOrganizationsPrefsAssociatedDomainByIdOrg  

-- *** deleteOrganizationsPrefsOrgInviteRestrictByIdOrg

-- | @DELETE \/organizations\/{idOrg}\/prefs\/orgInviteRestrict@
-- 
-- deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteOrganizationsPrefsOrgInviteRestrictByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Value -- ^ "value" -  An email address with optional expansion tokens
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteOrganizationsPrefsOrgInviteRestrictByIdOrg MimeNoContent NoContent MimeNoContent
deleteOrganizationsPrefsOrgInviteRestrictByIdOrg (IdOrg idOrg) (Value value) (Key key) (Token token) =
  _mkRequest "DELETE" ["/organizations/",toPath idOrg,"/prefs/orgInviteRestrict"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("value", Just value)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteOrganizationsPrefsOrgInviteRestrictByIdOrg  

-- *** getOrganizationsActionsByIdOrg

-- | @GET \/organizations\/{idOrg}\/actions@
-- 
-- getOrganizationsActionsByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsActionsByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsActionsByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsActionsByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/actions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsActionsByIdOrg  

-- | /Optional Param/ "entities" -  true or false
instance HasOptionalParam GetOrganizationsActionsByIdOrg Entities where
  applyOptionalParam req (Entities xs) =
    req `setQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "display" -  true or false
instance HasOptionalParam GetOrganizationsActionsByIdOrg Display where
  applyOptionalParam req (Display xs) =
    req `setQuery` toQuery ("display", Just xs)

-- | /Optional Param/ "filter" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetOrganizationsActionsByIdOrg Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetOrganizationsActionsByIdOrg Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "limit" - a number from 0 to 1000
instance HasOptionalParam GetOrganizationsActionsByIdOrg Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "format" - One of: count, list or minimal
instance HasOptionalParam GetOrganizationsActionsByIdOrg Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "since" - A date, null or lastView
instance HasOptionalParam GetOrganizationsActionsByIdOrg Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "before" - A date, or null
instance HasOptionalParam GetOrganizationsActionsByIdOrg Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "page" - Page * limit must be less than 1000
instance HasOptionalParam GetOrganizationsActionsByIdOrg Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "idModels" - Only return actions related to these model ids
instance HasOptionalParam GetOrganizationsActionsByIdOrg IdModels where
  applyOptionalParam req (IdModels xs) =
    req `setQuery` toQuery ("idModels", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetOrganizationsActionsByIdOrg Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsActionsByIdOrg MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "memberCreator" -  true or false
instance HasOptionalParam GetOrganizationsActionsByIdOrg MemberCreator where
  applyOptionalParam req (MemberCreator xs) =
    req `setQuery` toQuery ("memberCreator", Just xs)

-- | /Optional Param/ "memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsActionsByIdOrg MemberCreatorFields where
  applyOptionalParam req (MemberCreatorFields xs) =
    req `setQuery` toQuery ("memberCreator_fields", Just xs)

-- *** getOrganizationsBoardsByIdOrg

-- | @GET \/organizations\/{idOrg}\/boards@
-- 
-- getOrganizationsBoardsByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsBoardsByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsBoardsByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsBoardsByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/boards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsBoardsByIdOrg  

-- | /Optional Param/ "filter" - all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
instance HasOptionalParam GetOrganizationsBoardsByIdOrg Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetOrganizationsBoardsByIdOrg Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetOrganizationsBoardsByIdOrg Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetOrganizationsBoardsByIdOrg ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetOrganizationsBoardsByIdOrg ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "actions_format" - One of: count, list or minimal
instance HasOptionalParam GetOrganizationsBoardsByIdOrg ActionsFormat where
  applyOptionalParam req (ActionsFormat xs) =
    req `setQuery` toQuery ("actions_format", Just xs)

-- | /Optional Param/ "actions_since" - A date, null or lastView
instance HasOptionalParam GetOrganizationsBoardsByIdOrg ActionsSince where
  applyOptionalParam req (ActionsSince xs) =
    req `setQuery` toQuery ("actions_since", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetOrganizationsBoardsByIdOrg ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "memberships" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetOrganizationsBoardsByIdOrg Memberships where
  applyOptionalParam req (Memberships xs) =
    req `setQuery` toQuery ("memberships", Just xs)

-- | /Optional Param/ "organization" -  true or false
instance HasOptionalParam GetOrganizationsBoardsByIdOrg Organization where
  applyOptionalParam req (Organization xs) =
    req `setQuery` toQuery ("organization", Just xs)

-- | /Optional Param/ "organization_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetOrganizationsBoardsByIdOrg OrganizationFields where
  applyOptionalParam req (OrganizationFields xs) =
    req `setQuery` toQuery ("organization_fields", Just xs)

-- | /Optional Param/ "lists" - One of: all, closed, none or open
instance HasOptionalParam GetOrganizationsBoardsByIdOrg Lists2 where
  applyOptionalParam req (Lists2 xs) =
    req `setQuery` toQuery ("lists", Just xs)

-- *** getOrganizationsBoardsByIdOrgByFilter

-- | @GET \/organizations\/{idOrg}\/boards\/{filter}@
-- 
-- getOrganizationsBoardsByIdOrgByFilter()
-- 
getOrganizationsBoardsByIdOrgByFilter 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsBoardsByIdOrgByFilter MimeNoContent NoContent MimeNoContent
getOrganizationsBoardsByIdOrgByFilter (IdOrg idOrg) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/boards/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsBoardsByIdOrgByFilter  

-- *** getOrganizationsByIdOrg

-- | @GET \/organizations\/{idOrg}@
-- 
-- getOrganizationsByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsByIdOrg  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetOrganizationsByIdOrg Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetOrganizationsByIdOrg ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_display" -  true or false
instance HasOptionalParam GetOrganizationsByIdOrg ActionsDisplay where
  applyOptionalParam req (ActionsDisplay xs) =
    req `setQuery` toQuery ("actions_display", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetOrganizationsByIdOrg ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetOrganizationsByIdOrg ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "memberships" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetOrganizationsByIdOrg Memberships where
  applyOptionalParam req (Memberships xs) =
    req `setQuery` toQuery ("memberships", Just xs)

-- | /Optional Param/ "memberships_member" -  true or false
instance HasOptionalParam GetOrganizationsByIdOrg MembershipsMember where
  applyOptionalParam req (MembershipsMember xs) =
    req `setQuery` toQuery ("memberships_member", Just xs)

-- | /Optional Param/ "memberships_member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsByIdOrg MembershipsMemberFields where
  applyOptionalParam req (MembershipsMemberFields xs) =
    req `setQuery` toQuery ("memberships_member_fields", Just xs)

-- | /Optional Param/ "members" - One of: admins, all, none, normal or owners
instance HasOptionalParam GetOrganizationsByIdOrg Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsByIdOrg MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "member_activity" - true or false ; works for premium organizations only.
instance HasOptionalParam GetOrganizationsByIdOrg MemberActivity where
  applyOptionalParam req (MemberActivity xs) =
    req `setQuery` toQuery ("member_activity", Just xs)

-- | /Optional Param/ "membersInvited" - One of: admins, all, none, normal or owners
instance HasOptionalParam GetOrganizationsByIdOrg MembersInvited where
  applyOptionalParam req (MembersInvited xs) =
    req `setQuery` toQuery ("membersInvited", Just xs)

-- | /Optional Param/ "membersInvited_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsByIdOrg MembersInvitedFields where
  applyOptionalParam req (MembersInvitedFields xs) =
    req `setQuery` toQuery ("membersInvited_fields", Just xs)

-- | /Optional Param/ "boards" - all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned
instance HasOptionalParam GetOrganizationsByIdOrg Boards2 where
  applyOptionalParam req (Boards2 xs) =
    req `setQuery` toQuery ("boards", Just xs)

-- | /Optional Param/ "board_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetOrganizationsByIdOrg BoardFields where
  applyOptionalParam req (BoardFields xs) =
    req `setQuery` toQuery ("board_fields", Just xs)

-- | /Optional Param/ "board_actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetOrganizationsByIdOrg BoardActions where
  applyOptionalParam req (BoardActions xs) =
    req `setQuery` toQuery ("board_actions", Just xs)

-- | /Optional Param/ "board_actions_entities" -  true or false
instance HasOptionalParam GetOrganizationsByIdOrg BoardActionsEntities where
  applyOptionalParam req (BoardActionsEntities xs) =
    req `setQuery` toQuery ("board_actions_entities", Just xs)

-- | /Optional Param/ "board_actions_display" -  true or false
instance HasOptionalParam GetOrganizationsByIdOrg BoardActionsDisplay where
  applyOptionalParam req (BoardActionsDisplay xs) =
    req `setQuery` toQuery ("board_actions_display", Just xs)

-- | /Optional Param/ "board_actions_format" - One of: count, list or minimal
instance HasOptionalParam GetOrganizationsByIdOrg BoardActionsFormat where
  applyOptionalParam req (BoardActionsFormat xs) =
    req `setQuery` toQuery ("board_actions_format", Just xs)

-- | /Optional Param/ "board_actions_since" - A date, null or lastView
instance HasOptionalParam GetOrganizationsByIdOrg BoardActionsSince where
  applyOptionalParam req (BoardActionsSince xs) =
    req `setQuery` toQuery ("board_actions_since", Just xs)

-- | /Optional Param/ "board_actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetOrganizationsByIdOrg BoardActionsLimit where
  applyOptionalParam req (BoardActionsLimit xs) =
    req `setQuery` toQuery ("board_actions_limit", Just xs)

-- | /Optional Param/ "board_action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetOrganizationsByIdOrg BoardActionFields where
  applyOptionalParam req (BoardActionFields xs) =
    req `setQuery` toQuery ("board_action_fields", Just xs)

-- | /Optional Param/ "board_lists" - One of: all, closed, none or open
instance HasOptionalParam GetOrganizationsByIdOrg BoardLists where
  applyOptionalParam req (BoardLists xs) =
    req `setQuery` toQuery ("board_lists", Just xs)

-- | /Optional Param/ "paid_account" -  true or false
instance HasOptionalParam GetOrganizationsByIdOrg PaidAccount where
  applyOptionalParam req (PaidAccount xs) =
    req `setQuery` toQuery ("paid_account", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetOrganizationsByIdOrg Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getOrganizationsByIdOrgByField

-- | @GET \/organizations\/{idOrg}\/{field}@
-- 
-- getOrganizationsByIdOrgByField()
-- 
getOrganizationsByIdOrgByField 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsByIdOrgByField MimeNoContent NoContent MimeNoContent
getOrganizationsByIdOrgByField (IdOrg idOrg) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsByIdOrgByField  

-- *** getOrganizationsDeltasByIdOrg

-- | @GET \/organizations\/{idOrg}\/deltas@
-- 
-- getOrganizationsDeltasByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsDeltasByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Tags -- ^ "tags" -  A valid tag for subscribing
  -> IxLastUpdate -- ^ "ixLastUpdate" -  a number from -1 to Infinity
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsDeltasByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsDeltasByIdOrg (IdOrg idOrg) (Tags tags) (IxLastUpdate ixLastUpdate) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/deltas"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("tags", Just tags)
    `setQuery` toQuery ("ixLastUpdate", Just ixLastUpdate)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsDeltasByIdOrg  

-- *** getOrganizationsMembersByIdOrg

-- | @GET \/organizations\/{idOrg}\/members@
-- 
-- getOrganizationsMembersByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsMembersByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembersByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsMembersByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembersByIdOrg  

-- | /Optional Param/ "filter" - One of: admins, all, none, normal or owners
instance HasOptionalParam GetOrganizationsMembersByIdOrg Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsMembersByIdOrg Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "activity" - true or false ; works for premium organizations only.
instance HasOptionalParam GetOrganizationsMembersByIdOrg Activity where
  applyOptionalParam req (Activity xs) =
    req `setQuery` toQuery ("activity", Just xs)

-- *** getOrganizationsMembersByIdOrgByFilter

-- | @GET \/organizations\/{idOrg}\/members\/{filter}@
-- 
-- getOrganizationsMembersByIdOrgByFilter()
-- 
getOrganizationsMembersByIdOrgByFilter 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Filter -- ^ "filter" -  filter
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembersByIdOrgByFilter MimeNoContent NoContent MimeNoContent
getOrganizationsMembersByIdOrgByFilter (IdOrg idOrg) (Filter filter) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/members/",toPath filter]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembersByIdOrgByFilter  

-- *** getOrganizationsMembersCardsByIdOrgByIdMember

-- | @GET \/organizations\/{idOrg}\/members\/{idMember}\/cards@
-- 
-- getOrganizationsMembersCardsByIdOrgByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsMembersCardsByIdOrgByIdMember 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembersCardsByIdOrgByIdMember MimeNoContent NoContent MimeNoContent
getOrganizationsMembersCardsByIdOrgByIdMember (IdOrg idOrg) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/members/",toPath idMember,"/cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembersCardsByIdOrgByIdMember  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Attachments where
  applyOptionalParam req (Attachments xs) =
    req `setQuery` toQuery ("attachments", Just xs)

-- | /Optional Param/ "attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember AttachmentFields where
  applyOptionalParam req (AttachmentFields xs) =
    req `setQuery` toQuery ("attachment_fields", Just xs)

-- | /Optional Param/ "members" -  true or false
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "checkItemStates" -  true or false
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember CheckItemStates where
  applyOptionalParam req (CheckItemStates xs) =
    req `setQuery` toQuery ("checkItemStates", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "board" -  true or false
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Board where
  applyOptionalParam req (Board xs) =
    req `setQuery` toQuery ("board", Just xs)

-- | /Optional Param/ "board_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember BoardFields where
  applyOptionalParam req (BoardFields xs) =
    req `setQuery` toQuery ("board_fields", Just xs)

-- | /Optional Param/ "list" -  true or false
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember ParamList where
  applyOptionalParam req (ParamList xs) =
    req `setQuery` toQuery ("list", Just xs)

-- | /Optional Param/ "list_fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember ListFields where
  applyOptionalParam req (ListFields xs) =
    req `setQuery` toQuery ("list_fields", Just xs)

-- | /Optional Param/ "filter" - One of: all, closed, none, open or visible
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetOrganizationsMembersCardsByIdOrgByIdMember Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getOrganizationsMembersInvitedByIdOrg

-- | @GET \/organizations\/{idOrg}\/membersInvited@
-- 
-- getOrganizationsMembersInvitedByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsMembersInvitedByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembersInvitedByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsMembersInvitedByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/membersInvited"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembersInvitedByIdOrg  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
instance HasOptionalParam GetOrganizationsMembersInvitedByIdOrg Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getOrganizationsMembersInvitedByIdOrgByField

-- | @GET \/organizations\/{idOrg}\/membersInvited\/{field}@
-- 
-- getOrganizationsMembersInvitedByIdOrgByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsMembersInvitedByIdOrgByField 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembersInvitedByIdOrgByField MimeNoContent NoContent MimeNoContent
getOrganizationsMembersInvitedByIdOrgByField (IdOrg idOrg) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/membersInvited/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembersInvitedByIdOrgByField  

-- *** getOrganizationsMembershipsByIdOrg

-- | @GET \/organizations\/{idOrg}\/memberships@
-- 
-- getOrganizationsMembershipsByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsMembershipsByIdOrg 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembershipsByIdOrg MimeNoContent NoContent MimeNoContent
getOrganizationsMembershipsByIdOrg (IdOrg idOrg) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/memberships"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembershipsByIdOrg  

-- | /Optional Param/ "filter" - all or a comma-separated list of: active, admin, deactivated, me or normal
instance HasOptionalParam GetOrganizationsMembershipsByIdOrg Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetOrganizationsMembershipsByIdOrg Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsMembershipsByIdOrg MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- *** getOrganizationsMembershipsByIdOrgByIdMembership

-- | @GET \/organizations\/{idOrg}\/memberships\/{idMembership}@
-- 
-- getOrganizationsMembershipsByIdOrgByIdMembership()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getOrganizationsMembershipsByIdOrgByIdMembership 
  :: IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMembership -- ^ "idMembership" -  idMembership
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetOrganizationsMembershipsByIdOrgByIdMembership MimeNoContent NoContent MimeNoContent
getOrganizationsMembershipsByIdOrgByIdMembership (IdOrg idOrg) (IdMembership idMembership) (Key key) (Token token) =
  _mkRequest "GET" ["/organizations/",toPath idOrg,"/memberships/",toPath idMembership]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetOrganizationsMembershipsByIdOrgByIdMembership  

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetOrganizationsMembershipsByIdOrgByIdMembership Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetOrganizationsMembershipsByIdOrgByIdMembership MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- *** updateOrganizationsByIdOrg

-- | @PUT \/organizations\/{idOrg}@
-- 
-- updateOrganizationsByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsByIdOrg 
  :: (Consumes UpdateOrganizationsByIdOrg contentType, MimeRender contentType Organizations)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> Organizations -- ^ "body" -  Attributes of \"Organizations\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsByIdOrg contentType NoContent MimeNoContent
updateOrganizationsByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations\" to be updated.
instance HasBodyParam UpdateOrganizationsByIdOrg Organizations 

-- *** updateOrganizationsDescByIdOrg

-- | @PUT \/organizations\/{idOrg}\/desc@
-- 
-- updateOrganizationsDescByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsDescByIdOrg 
  :: (Consumes UpdateOrganizationsDescByIdOrg contentType, MimeRender contentType OrganizationsDesc)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> OrganizationsDesc -- ^ "body" -  Attributes of \"Organizations Desc\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsDescByIdOrg contentType NoContent MimeNoContent
updateOrganizationsDescByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/desc"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsDescByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations Desc\" to be updated.
instance HasBodyParam UpdateOrganizationsDescByIdOrg OrganizationsDesc 

-- *** updateOrganizationsDisplayNameByIdOrg

-- | @PUT \/organizations\/{idOrg}\/displayName@
-- 
-- updateOrganizationsDisplayNameByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsDisplayNameByIdOrg 
  :: (Consumes UpdateOrganizationsDisplayNameByIdOrg contentType, MimeRender contentType OrganizationsDisplayName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> OrganizationsDisplayName -- ^ "body" -  Attributes of \"Organizations Display Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsDisplayNameByIdOrg contentType NoContent MimeNoContent
updateOrganizationsDisplayNameByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/displayName"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsDisplayNameByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations Display Name\" to be updated.
instance HasBodyParam UpdateOrganizationsDisplayNameByIdOrg OrganizationsDisplayName 

-- *** updateOrganizationsMembersByIdOrg

-- | @PUT \/organizations\/{idOrg}\/members@
-- 
-- updateOrganizationsMembersByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsMembersByIdOrg 
  :: (Consumes UpdateOrganizationsMembersByIdOrg contentType, MimeRender contentType OrganizationsMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> OrganizationsMembers -- ^ "body" -  Attributes of \"Organizations Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsMembersByIdOrg contentType NoContent MimeNoContent
updateOrganizationsMembersByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsMembersByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations Members\" to be updated.
instance HasBodyParam UpdateOrganizationsMembersByIdOrg OrganizationsMembers 

-- *** updateOrganizationsMembersByIdOrgByIdMember

-- | @PUT \/organizations\/{idOrg}\/members\/{idMember}@
-- 
-- updateOrganizationsMembersByIdOrgByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsMembersByIdOrgByIdMember 
  :: (Consumes UpdateOrganizationsMembersByIdOrgByIdMember contentType, MimeRender contentType OrganizationsMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMember -- ^ "idMember" -  idMember
  -> OrganizationsMembers -- ^ "body" -  Attributes of \"Organizations Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsMembersByIdOrgByIdMember contentType NoContent MimeNoContent
updateOrganizationsMembersByIdOrgByIdMember _ (IdOrg idOrg) (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/members/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsMembersByIdOrgByIdMember 

-- | /Body Param/ "body" - Attributes of \"Organizations Members\" to be updated.
instance HasBodyParam UpdateOrganizationsMembersByIdOrgByIdMember OrganizationsMembers 

-- *** updateOrganizationsMembersDeactivatedByIdOrgByIdMember

-- | @PUT \/organizations\/{idOrg}\/members\/{idMember}\/deactivated@
-- 
-- updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsMembersDeactivatedByIdOrgByIdMember 
  :: (Consumes UpdateOrganizationsMembersDeactivatedByIdOrgByIdMember contentType, MimeRender contentType OrganizationsMembersDeactivated)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMember -- ^ "idMember" -  idMember
  -> OrganizationsMembersDeactivated -- ^ "body" -  Attributes of \"Organizations Members Deactivated\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsMembersDeactivatedByIdOrgByIdMember contentType NoContent MimeNoContent
updateOrganizationsMembersDeactivatedByIdOrgByIdMember _ (IdOrg idOrg) (IdMember idMember) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/members/",toPath idMember,"/deactivated"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsMembersDeactivatedByIdOrgByIdMember 

-- | /Body Param/ "body" - Attributes of \"Organizations Members Deactivated\" to be updated.
instance HasBodyParam UpdateOrganizationsMembersDeactivatedByIdOrgByIdMember OrganizationsMembersDeactivated 

-- *** updateOrganizationsMembershipsByIdOrgByIdMembership

-- | @PUT \/organizations\/{idOrg}\/memberships\/{idMembership}@
-- 
-- updateOrganizationsMembershipsByIdOrgByIdMembership()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsMembershipsByIdOrgByIdMembership 
  :: (Consumes UpdateOrganizationsMembershipsByIdOrgByIdMembership contentType, MimeRender contentType OrganizationsMemberships)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> IdMembership -- ^ "idMembership" -  idMembership
  -> OrganizationsMemberships -- ^ "body" -  Attributes of \"Organizations Memberships\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsMembershipsByIdOrgByIdMembership contentType NoContent MimeNoContent
updateOrganizationsMembershipsByIdOrgByIdMembership _ (IdOrg idOrg) (IdMembership idMembership) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/memberships/",toPath idMembership]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsMembershipsByIdOrgByIdMembership 

-- | /Body Param/ "body" - Attributes of \"Organizations Memberships\" to be updated.
instance HasBodyParam UpdateOrganizationsMembershipsByIdOrgByIdMembership OrganizationsMemberships 

-- *** updateOrganizationsNameByIdOrg

-- | @PUT \/organizations\/{idOrg}\/name@
-- 
-- updateOrganizationsNameByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsNameByIdOrg 
  :: (Consumes UpdateOrganizationsNameByIdOrg contentType, MimeRender contentType OrganizationsName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> OrganizationsName -- ^ "body" -  Attributes of \"Organizations Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsNameByIdOrg contentType NoContent MimeNoContent
updateOrganizationsNameByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/name"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsNameByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations Name\" to be updated.
instance HasBodyParam UpdateOrganizationsNameByIdOrg OrganizationsName 

-- *** updateOrganizationsPrefsAssociatedDomainByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/associatedDomain@
-- 
-- updateOrganizationsPrefsAssociatedDomainByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsAssociatedDomainByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsAssociatedDomainByIdOrg contentType, MimeRender contentType PrefsAssociatedDomain)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsAssociatedDomain -- ^ "body" -  Attributes of \"Prefs Associated Domain\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsAssociatedDomainByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsAssociatedDomainByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/associatedDomain"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsAssociatedDomainByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Associated Domain\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsAssociatedDomainByIdOrg PrefsAssociatedDomain 

-- *** updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/boardVisibilityRestrict\/org@
-- 
-- updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg contentType, MimeRender contentType PrefsBoardVisibilityRestrict)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsBoardVisibilityRestrict -- ^ "body" -  Attributes of \"Prefs Board Visibility Restrict\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/boardVisibilityRestrict/org"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Board Visibility Restrict\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg PrefsBoardVisibilityRestrict 

-- *** updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/boardVisibilityRestrict\/private@
-- 
-- updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg contentType, MimeRender contentType PrefsBoardVisibilityRestrict)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsBoardVisibilityRestrict -- ^ "body" -  Attributes of \"Prefs Board Visibility Restrict\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/boardVisibilityRestrict/private"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Board Visibility Restrict\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg PrefsBoardVisibilityRestrict 

-- *** updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/boardVisibilityRestrict\/public@
-- 
-- updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg contentType, MimeRender contentType PrefsBoardVisibilityRestrict)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsBoardVisibilityRestrict -- ^ "body" -  Attributes of \"Prefs Board Visibility Restrict\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/boardVisibilityRestrict/public"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Board Visibility Restrict\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg PrefsBoardVisibilityRestrict 

-- *** updateOrganizationsPrefsExternalMembersDisabledByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/externalMembersDisabled@
-- 
-- updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsExternalMembersDisabledByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsExternalMembersDisabledByIdOrg contentType, MimeRender contentType PrefsExternalMembersDisabled)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsExternalMembersDisabled -- ^ "body" -  Attributes of \"Prefs External Members Disabled\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsExternalMembersDisabledByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsExternalMembersDisabledByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/externalMembersDisabled"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsExternalMembersDisabledByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs External Members Disabled\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsExternalMembersDisabledByIdOrg PrefsExternalMembersDisabled 

-- *** updateOrganizationsPrefsGoogleAppsVersionByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/googleAppsVersion@
-- 
-- updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsGoogleAppsVersionByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsGoogleAppsVersionByIdOrg contentType, MimeRender contentType PrefsGoogleAppsVersion)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsGoogleAppsVersion -- ^ "body" -  Attributes of \"Prefs Google Apps Version\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsGoogleAppsVersionByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsGoogleAppsVersionByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/googleAppsVersion"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsGoogleAppsVersionByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Google Apps Version\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsGoogleAppsVersionByIdOrg PrefsGoogleAppsVersion 

-- *** updateOrganizationsPrefsOrgInviteRestrictByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/orgInviteRestrict@
-- 
-- updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsOrgInviteRestrictByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsOrgInviteRestrictByIdOrg contentType, MimeRender contentType PrefsOrgInviteRestrict)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsOrgInviteRestrict -- ^ "body" -  Attributes of \"Prefs Org Invite Restrict\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsOrgInviteRestrictByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsOrgInviteRestrictByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/orgInviteRestrict"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsOrgInviteRestrictByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Org Invite Restrict\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsOrgInviteRestrictByIdOrg PrefsOrgInviteRestrict 

-- *** updateOrganizationsPrefsPermissionLevelByIdOrg

-- | @PUT \/organizations\/{idOrg}\/prefs\/permissionLevel@
-- 
-- updateOrganizationsPrefsPermissionLevelByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsPrefsPermissionLevelByIdOrg 
  :: (Consumes UpdateOrganizationsPrefsPermissionLevelByIdOrg contentType, MimeRender contentType PrefsPermissionLevel)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> PrefsPermissionLevel -- ^ "body" -  Attributes of \"Prefs Permission Level\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsPrefsPermissionLevelByIdOrg contentType NoContent MimeNoContent
updateOrganizationsPrefsPermissionLevelByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/prefs/permissionLevel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsPrefsPermissionLevelByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Prefs Permission Level\" to be updated.
instance HasBodyParam UpdateOrganizationsPrefsPermissionLevelByIdOrg PrefsPermissionLevel 

-- *** updateOrganizationsWebsiteByIdOrg

-- | @PUT \/organizations\/{idOrg}\/website@
-- 
-- updateOrganizationsWebsiteByIdOrg()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateOrganizationsWebsiteByIdOrg 
  :: (Consumes UpdateOrganizationsWebsiteByIdOrg contentType, MimeRender contentType OrganizationsWebsite)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdOrg -- ^ "idOrg" -  idOrg or name
  -> OrganizationsWebsite -- ^ "body" -  Attributes of \"Organizations Website\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateOrganizationsWebsiteByIdOrg contentType NoContent MimeNoContent
updateOrganizationsWebsiteByIdOrg _ (IdOrg idOrg) body (Key key) (Token token) =
  _mkRequest "PUT" ["/organizations/",toPath idOrg,"/website"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateOrganizationsWebsiteByIdOrg 

-- | /Body Param/ "body" - Attributes of \"Organizations Website\" to be updated.
instance HasBodyParam UpdateOrganizationsWebsiteByIdOrg OrganizationsWebsite 
