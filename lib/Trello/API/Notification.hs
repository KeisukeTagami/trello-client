{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Notification
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Notification where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Notification

-- *** addNotificationsAllRead

-- | @POST \/notifications\/all\/read@
-- 
-- addNotificationsAllRead()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addNotificationsAllRead 
  :: Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddNotificationsAllRead MimeNoContent NoContent MimeNoContent
addNotificationsAllRead (Key key) (Token token) =
  _mkRequest "POST" ["/notifications/all/read"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddNotificationsAllRead  

-- *** getNotificationsBoardByIdNotification

-- | @GET \/notifications\/{idNotification}\/board@
-- 
-- getNotificationsBoardByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsBoardByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsBoardByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsBoardByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/board"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsBoardByIdNotification  

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetNotificationsBoardByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getNotificationsBoardByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/board\/{field}@
-- 
-- getNotificationsBoardByIdNotificationByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsBoardByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsBoardByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsBoardByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/board/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsBoardByIdNotificationByField  

-- *** getNotificationsByIdNotification

-- | @GET \/notifications\/{idNotification}@
-- 
-- getNotificationsByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsByIdNotification  

-- | /Optional Param/ "display" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification Display where
  applyOptionalParam req (Display xs) =
    req `setQuery` toQuery ("display", Just xs)

-- | /Optional Param/ "entities" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification Entities where
  applyOptionalParam req (Entities xs) =
    req `setQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: data, date, idMemberCreator, type or unread
instance HasOptionalParam GetNotificationsByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "memberCreator" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification MemberCreator where
  applyOptionalParam req (MemberCreator xs) =
    req `setQuery` toQuery ("memberCreator", Just xs)

-- | /Optional Param/ "memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetNotificationsByIdNotification MemberCreatorFields where
  applyOptionalParam req (MemberCreatorFields xs) =
    req `setQuery` toQuery ("memberCreator_fields", Just xs)

-- | /Optional Param/ "board" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification Board where
  applyOptionalParam req (Board xs) =
    req `setQuery` toQuery ("board", Just xs)

-- | /Optional Param/ "board_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetNotificationsByIdNotification BoardFields where
  applyOptionalParam req (BoardFields xs) =
    req `setQuery` toQuery ("board_fields", Just xs)

-- | /Optional Param/ "list" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification ParamList where
  applyOptionalParam req (ParamList xs) =
    req `setQuery` toQuery ("list", Just xs)

-- | /Optional Param/ "card" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification Card where
  applyOptionalParam req (Card xs) =
    req `setQuery` toQuery ("card", Just xs)

-- | /Optional Param/ "card_fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetNotificationsByIdNotification CardFields where
  applyOptionalParam req (CardFields xs) =
    req `setQuery` toQuery ("card_fields", Just xs)

-- | /Optional Param/ "organization" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification Organization where
  applyOptionalParam req (Organization xs) =
    req `setQuery` toQuery ("organization", Just xs)

-- | /Optional Param/ "organization_fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetNotificationsByIdNotification OrganizationFields where
  applyOptionalParam req (OrganizationFields xs) =
    req `setQuery` toQuery ("organization_fields", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetNotificationsByIdNotification Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetNotificationsByIdNotification MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- *** getNotificationsByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/{field}@
-- 
-- getNotificationsByIdNotificationByField()
-- 
getNotificationsByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsByIdNotificationByField  

-- *** getNotificationsCardByIdNotification

-- | @GET \/notifications\/{idNotification}\/card@
-- 
-- getNotificationsCardByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsCardByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsCardByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsCardByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/card"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsCardByIdNotification  

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetNotificationsCardByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getNotificationsCardByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/card\/{field}@
-- 
-- getNotificationsCardByIdNotificationByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsCardByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsCardByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsCardByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/card/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsCardByIdNotificationByField  

-- *** getNotificationsDisplayByIdNotification

-- | @GET \/notifications\/{idNotification}\/display@
-- 
-- getNotificationsDisplayByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsDisplayByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsDisplayByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsDisplayByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/display"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsDisplayByIdNotification  

-- *** getNotificationsEntitiesByIdNotification

-- | @GET \/notifications\/{idNotification}\/entities@
-- 
-- getNotificationsEntitiesByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsEntitiesByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsEntitiesByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsEntitiesByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/entities"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsEntitiesByIdNotification  

-- *** getNotificationsListByIdNotification

-- | @GET \/notifications\/{idNotification}\/list@
-- 
-- getNotificationsListByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsListByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsListByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsListByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsListByIdNotification  

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetNotificationsListByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getNotificationsListByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/list\/{field}@
-- 
-- getNotificationsListByIdNotificationByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsListByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsListByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsListByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/list/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsListByIdNotificationByField  

-- *** getNotificationsMemberByIdNotification

-- | @GET \/notifications\/{idNotification}\/member@
-- 
-- getNotificationsMemberByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsMemberByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsMemberByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsMemberByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/member"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsMemberByIdNotification  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
instance HasOptionalParam GetNotificationsMemberByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getNotificationsMemberByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/member\/{field}@
-- 
-- getNotificationsMemberByIdNotificationByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsMemberByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsMemberByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsMemberByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/member/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsMemberByIdNotificationByField  

-- *** getNotificationsMemberCreatorByIdNotification

-- | @GET \/notifications\/{idNotification}\/memberCreator@
-- 
-- getNotificationsMemberCreatorByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsMemberCreatorByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsMemberCreatorByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsMemberCreatorByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/memberCreator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsMemberCreatorByIdNotification  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username
instance HasOptionalParam GetNotificationsMemberCreatorByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getNotificationsMemberCreatorByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/memberCreator\/{field}@
-- 
-- getNotificationsMemberCreatorByIdNotificationByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsMemberCreatorByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsMemberCreatorByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsMemberCreatorByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/memberCreator/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsMemberCreatorByIdNotificationByField  

-- *** getNotificationsOrganizationByIdNotification

-- | @GET \/notifications\/{idNotification}\/organization@
-- 
-- getNotificationsOrganizationByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsOrganizationByIdNotification 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsOrganizationByIdNotification MimeNoContent NoContent MimeNoContent
getNotificationsOrganizationByIdNotification (IdNotification idNotification) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/organization"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsOrganizationByIdNotification  

-- | /Optional Param/ "fields" - all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website
instance HasOptionalParam GetNotificationsOrganizationByIdNotification Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getNotificationsOrganizationByIdNotificationByField

-- | @GET \/notifications\/{idNotification}\/organization\/{field}@
-- 
-- getNotificationsOrganizationByIdNotificationByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getNotificationsOrganizationByIdNotificationByField 
  :: IdNotification -- ^ "idNotification" -  idNotification
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetNotificationsOrganizationByIdNotificationByField MimeNoContent NoContent MimeNoContent
getNotificationsOrganizationByIdNotificationByField (IdNotification idNotification) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/notifications/",toPath idNotification,"/organization/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetNotificationsOrganizationByIdNotificationByField  

-- *** updateNotificationsByIdNotification

-- | @PUT \/notifications\/{idNotification}@
-- 
-- updateNotificationsByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateNotificationsByIdNotification 
  :: (Consumes UpdateNotificationsByIdNotification contentType, MimeRender contentType Notifications)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdNotification -- ^ "idNotification" -  idNotification
  -> Notifications -- ^ "body" -  Attributes of \"Notifications\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateNotificationsByIdNotification contentType NoContent MimeNoContent
updateNotificationsByIdNotification _ (IdNotification idNotification) body (Key key) (Token token) =
  _mkRequest "PUT" ["/notifications/",toPath idNotification]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateNotificationsByIdNotification 

-- | /Body Param/ "body" - Attributes of \"Notifications\" to be updated.
instance HasBodyParam UpdateNotificationsByIdNotification Notifications 

-- *** updateNotificationsUnreadByIdNotification

-- | @PUT \/notifications\/{idNotification}\/unread@
-- 
-- updateNotificationsUnreadByIdNotification()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateNotificationsUnreadByIdNotification 
  :: (Consumes UpdateNotificationsUnreadByIdNotification contentType, MimeRender contentType NotificationsUnread)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdNotification -- ^ "idNotification" -  idNotification
  -> NotificationsUnread -- ^ "body" -  Attributes of \"Notifications Unread\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateNotificationsUnreadByIdNotification contentType NoContent MimeNoContent
updateNotificationsUnreadByIdNotification _ (IdNotification idNotification) body (Key key) (Token token) =
  _mkRequest "PUT" ["/notifications/",toPath idNotification,"/unread"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateNotificationsUnreadByIdNotification 

-- | /Body Param/ "body" - Attributes of \"Notifications Unread\" to be updated.
instance HasBodyParam UpdateNotificationsUnreadByIdNotification NotificationsUnread 
