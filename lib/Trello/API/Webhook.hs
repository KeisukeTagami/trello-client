{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Webhook
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Webhook where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Webhook

-- *** addWebhooks

-- | @POST \/webhooks@
-- 
-- addWebhooks()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addWebhooks 
  :: (Consumes AddWebhooks contentType, MimeRender contentType Webhooks)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Webhooks -- ^ "body" -  Attributes of \"Webhooks\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddWebhooks contentType NoContent MimeNoContent
addWebhooks _ body (Key key) (Token token) =
  _mkRequest "POST" ["/webhooks"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddWebhooks 

-- | /Body Param/ "body" - Attributes of \"Webhooks\" to be added.
instance HasBodyParam AddWebhooks Webhooks 

-- *** deleteWebhooksByIdWebhook

-- | @DELETE \/webhooks\/{idWebhook}@
-- 
-- deleteWebhooksByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteWebhooksByIdWebhook 
  :: IdWebhook -- ^ "idWebhook" -  idWebhook
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteWebhooksByIdWebhook MimeNoContent NoContent MimeNoContent
deleteWebhooksByIdWebhook (IdWebhook idWebhook) (Key key) (Token token) =
  _mkRequest "DELETE" ["/webhooks/",toPath idWebhook]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteWebhooksByIdWebhook  

-- *** getWebhooksByIdWebhook

-- | @GET \/webhooks\/{idWebhook}@
-- 
-- getWebhooksByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getWebhooksByIdWebhook 
  :: IdWebhook -- ^ "idWebhook" -  idWebhook
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetWebhooksByIdWebhook MimeNoContent NoContent MimeNoContent
getWebhooksByIdWebhook (IdWebhook idWebhook) (Key key) (Token token) =
  _mkRequest "GET" ["/webhooks/",toPath idWebhook]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetWebhooksByIdWebhook  

-- *** getWebhooksByIdWebhookByField

-- | @GET \/webhooks\/{idWebhook}\/{field}@
-- 
-- getWebhooksByIdWebhookByField()
-- 
getWebhooksByIdWebhookByField 
  :: IdWebhook -- ^ "idWebhook" -  idWebhook
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetWebhooksByIdWebhookByField MimeNoContent NoContent MimeNoContent
getWebhooksByIdWebhookByField (IdWebhook idWebhook) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/webhooks/",toPath idWebhook,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetWebhooksByIdWebhookByField  

-- *** updateWebhooks

-- | @PUT \/webhooks\/@
-- 
-- updateWebhooks()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateWebhooks 
  :: (Consumes UpdateWebhooks contentType, MimeRender contentType Webhooks)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Webhooks -- ^ "body" -  Attributes of \"Webhooks\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateWebhooks contentType NoContent MimeNoContent
updateWebhooks _ body (Key key) (Token token) =
  _mkRequest "PUT" ["/webhooks/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateWebhooks 

-- | /Body Param/ "body" - Attributes of \"Webhooks\" to be updated.
instance HasBodyParam UpdateWebhooks Webhooks 

-- *** updateWebhooksActiveByIdWebhook

-- | @PUT \/webhooks\/{idWebhook}\/active@
-- 
-- updateWebhooksActiveByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateWebhooksActiveByIdWebhook 
  :: (Consumes UpdateWebhooksActiveByIdWebhook contentType, MimeRender contentType WebhooksActive)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> WebhooksActive -- ^ "body" -  Attributes of \"Webhooks Active\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateWebhooksActiveByIdWebhook contentType NoContent MimeNoContent
updateWebhooksActiveByIdWebhook _ (IdWebhook idWebhook) body (Key key) (Token token) =
  _mkRequest "PUT" ["/webhooks/",toPath idWebhook,"/active"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateWebhooksActiveByIdWebhook 

-- | /Body Param/ "body" - Attributes of \"Webhooks Active\" to be updated.
instance HasBodyParam UpdateWebhooksActiveByIdWebhook WebhooksActive 

-- *** updateWebhooksByIdWebhook

-- | @PUT \/webhooks\/{idWebhook}@
-- 
-- updateWebhooksByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateWebhooksByIdWebhook 
  :: (Consumes UpdateWebhooksByIdWebhook contentType, MimeRender contentType Webhooks)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> Webhooks -- ^ "body" -  Attributes of \"Webhooks\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateWebhooksByIdWebhook contentType NoContent MimeNoContent
updateWebhooksByIdWebhook _ (IdWebhook idWebhook) body (Key key) (Token token) =
  _mkRequest "PUT" ["/webhooks/",toPath idWebhook]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateWebhooksByIdWebhook 

-- | /Body Param/ "body" - Attributes of \"Webhooks\" to be updated.
instance HasBodyParam UpdateWebhooksByIdWebhook Webhooks 

-- *** updateWebhooksCallbackURLByIdWebhook

-- | @PUT \/webhooks\/{idWebhook}\/callbackURL@
-- 
-- updateWebhooksCallbackURLByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateWebhooksCallbackURLByIdWebhook 
  :: (Consumes UpdateWebhooksCallbackURLByIdWebhook contentType, MimeRender contentType WebhooksCallbackURL)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> WebhooksCallbackURL -- ^ "body" -  Attributes of \"Webhooks Callback Url\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateWebhooksCallbackURLByIdWebhook contentType NoContent MimeNoContent
updateWebhooksCallbackURLByIdWebhook _ (IdWebhook idWebhook) body (Key key) (Token token) =
  _mkRequest "PUT" ["/webhooks/",toPath idWebhook,"/callbackURL"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateWebhooksCallbackURLByIdWebhook 

-- | /Body Param/ "body" - Attributes of \"Webhooks Callback Url\" to be updated.
instance HasBodyParam UpdateWebhooksCallbackURLByIdWebhook WebhooksCallbackURL 

-- *** updateWebhooksDescriptionByIdWebhook

-- | @PUT \/webhooks\/{idWebhook}\/description@
-- 
-- updateWebhooksDescriptionByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateWebhooksDescriptionByIdWebhook 
  :: (Consumes UpdateWebhooksDescriptionByIdWebhook contentType, MimeRender contentType WebhooksDescription)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> WebhooksDescription -- ^ "body" -  Attributes of \"Webhooks Description\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateWebhooksDescriptionByIdWebhook contentType NoContent MimeNoContent
updateWebhooksDescriptionByIdWebhook _ (IdWebhook idWebhook) body (Key key) (Token token) =
  _mkRequest "PUT" ["/webhooks/",toPath idWebhook,"/description"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateWebhooksDescriptionByIdWebhook 

-- | /Body Param/ "body" - Attributes of \"Webhooks Description\" to be updated.
instance HasBodyParam UpdateWebhooksDescriptionByIdWebhook WebhooksDescription 

-- *** updateWebhooksIdModelByIdWebhook

-- | @PUT \/webhooks\/{idWebhook}\/idModel@
-- 
-- updateWebhooksIdModelByIdWebhook()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateWebhooksIdModelByIdWebhook 
  :: (Consumes UpdateWebhooksIdModelByIdWebhook contentType, MimeRender contentType WebhooksIdModel)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdWebhook -- ^ "idWebhook" -  idWebhook
  -> WebhooksIdModel -- ^ "body" -  Attributes of \"Webhooks Id Model\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateWebhooksIdModelByIdWebhook contentType NoContent MimeNoContent
updateWebhooksIdModelByIdWebhook _ (IdWebhook idWebhook) body (Key key) (Token token) =
  _mkRequest "PUT" ["/webhooks/",toPath idWebhook,"/idModel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateWebhooksIdModelByIdWebhook 

-- | /Body Param/ "body" - Attributes of \"Webhooks Id Model\" to be updated.
instance HasBodyParam UpdateWebhooksIdModelByIdWebhook WebhooksIdModel 
