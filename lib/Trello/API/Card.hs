{-
   Trello

   This document describes the REST API of Trello as published by Trello.com.  - <a href='https://trello.com/docs/index.html' target='_blank'>Official Documentation</a>  - <a href='https://trello.com/docs/api' target='_blank'>The HTML pages that were scraped in order to generate this specification.</a>

   OpenAPI spec version: 2.0
   Trello API version: 1.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Trello.API.Card
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Trello.API.Card where

import Trello.Core
import Trello.MimeTypes
import Trello.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Card

-- *** addCards

-- | @POST \/cards@
-- 
-- addCards()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCards 
  :: (Consumes AddCards contentType, MimeRender contentType Cards)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Cards -- ^ "body" -  Attributes of \"Cards\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCards contentType NoContent MimeNoContent
addCards _ body (Key key) (Token token) =
  _mkRequest "POST" ["/cards"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCards 

-- | /Body Param/ "body" - Attributes of \"Cards\" to be added.
instance HasBodyParam AddCards Cards 

-- *** addCardsActionsCommentsByIdCard

-- | @POST \/cards\/{idCard}\/actions\/comments@
-- 
-- addCardsActionsCommentsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsActionsCommentsByIdCard 
  :: (Consumes AddCardsActionsCommentsByIdCard contentType, MimeRender contentType ActionsComments)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> ActionsComments -- ^ "body" -  Attributes of \"Actions Comments\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsActionsCommentsByIdCard contentType NoContent MimeNoContent
addCardsActionsCommentsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/actions/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsActionsCommentsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Actions Comments\" to be added.
instance HasBodyParam AddCardsActionsCommentsByIdCard ActionsComments 

-- *** addCardsAttachmentsByIdCard

-- | @POST \/cards\/{idCard}\/attachments@
-- 
-- addCardsAttachmentsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsAttachmentsByIdCard 
  :: (Consumes AddCardsAttachmentsByIdCard contentType, MimeRender contentType CardsAttachments)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsAttachments -- ^ "body" -  Attributes of \"Cards Attachments\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsAttachmentsByIdCard contentType NoContent MimeNoContent
addCardsAttachmentsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/attachments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsAttachmentsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Attachments\" to be added.
instance HasBodyParam AddCardsAttachmentsByIdCard CardsAttachments 

-- *** addCardsChecklistCheckItemByIdCardByIdChecklist

-- | @POST \/cards\/{idCard}\/checklist\/{idChecklist}\/checkItem@
-- 
-- addCardsChecklistCheckItemByIdCardByIdChecklist()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsChecklistCheckItemByIdCardByIdChecklist 
  :: (Consumes AddCardsChecklistCheckItemByIdCardByIdChecklist contentType, MimeRender contentType CardsChecklistCheckItem)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> CardsChecklistCheckItem -- ^ "body" -  Attributes of \"Cards Checklist Check Item\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsChecklistCheckItemByIdCardByIdChecklist contentType NoContent MimeNoContent
addCardsChecklistCheckItemByIdCardByIdChecklist _ (IdCard idCard) (IdChecklist idChecklist) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/checklist/",toPath idChecklist,"/checkItem"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsChecklistCheckItemByIdCardByIdChecklist 

-- | /Body Param/ "body" - Attributes of \"Cards Checklist Check Item\" to be added.
instance HasBodyParam AddCardsChecklistCheckItemByIdCardByIdChecklist CardsChecklistCheckItem 

-- *** addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem

-- | @POST \/cards\/{idCard}\/checklist\/{idChecklist}\/checkItem\/{idCheckItem}\/convertToCard@
-- 
-- addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> IdCheckItem -- ^ "idCheckItem" -  idCheckItem
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem MimeNoContent NoContent MimeNoContent
addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem (IdCard idCard) (IdChecklist idChecklist) (IdCheckItem idCheckItem) (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/checklist/",toPath idChecklist,"/checkItem/",toPath idCheckItem,"/convertToCard"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem  

-- *** addCardsChecklistsByIdCard

-- | @POST \/cards\/{idCard}\/checklists@
-- 
-- addCardsChecklistsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsChecklistsByIdCard 
  :: (Consumes AddCardsChecklistsByIdCard contentType, MimeRender contentType CardsChecklists)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsChecklists -- ^ "body" -  Attributes of \"Cards Checklists\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsChecklistsByIdCard contentType NoContent MimeNoContent
addCardsChecklistsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/checklists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsChecklistsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Checklists\" to be added.
instance HasBodyParam AddCardsChecklistsByIdCard CardsChecklists 

-- *** addCardsIdLabelsByIdCard

-- | @POST \/cards\/{idCard}\/idLabels@
-- 
-- addCardsIdLabelsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsIdLabelsByIdCard 
  :: (Consumes AddCardsIdLabelsByIdCard contentType, MimeRender contentType CardsIdLabels)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsIdLabels -- ^ "body" -  Attributes of \"Cards Id Labels\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsIdLabelsByIdCard contentType NoContent MimeNoContent
addCardsIdLabelsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/idLabels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsIdLabelsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Id Labels\" to be added.
instance HasBodyParam AddCardsIdLabelsByIdCard CardsIdLabels 

-- *** addCardsIdMembersByIdCard

-- | @POST \/cards\/{idCard}\/idMembers@
-- 
-- addCardsIdMembersByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsIdMembersByIdCard 
  :: (Consumes AddCardsIdMembersByIdCard contentType, MimeRender contentType CardsIdMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsIdMembers -- ^ "body" -  Attributes of \"Cards Id Members\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsIdMembersByIdCard contentType NoContent MimeNoContent
addCardsIdMembersByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/idMembers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsIdMembersByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Id Members\" to be added.
instance HasBodyParam AddCardsIdMembersByIdCard CardsIdMembers 

-- *** addCardsLabelsByIdCard

-- | @POST \/cards\/{idCard}\/labels@
-- 
-- addCardsLabelsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsLabelsByIdCard 
  :: (Consumes AddCardsLabelsByIdCard contentType, MimeRender contentType CardsLabels)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsLabels -- ^ "body" -  Attributes of \"Cards Labels\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsLabelsByIdCard contentType NoContent MimeNoContent
addCardsLabelsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsLabelsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Labels\" to be added.
instance HasBodyParam AddCardsLabelsByIdCard CardsLabels 

-- *** addCardsMarkAssociatedNotificationsReadByIdCard

-- | @POST \/cards\/{idCard}\/markAssociatedNotificationsRead@
-- 
-- addCardsMarkAssociatedNotificationsReadByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsMarkAssociatedNotificationsReadByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsMarkAssociatedNotificationsReadByIdCard MimeNoContent NoContent MimeNoContent
addCardsMarkAssociatedNotificationsReadByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/markAssociatedNotificationsRead"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsMarkAssociatedNotificationsReadByIdCard  

-- *** addCardsMembersVotedByIdCard

-- | @POST \/cards\/{idCard}\/membersVoted@
-- 
-- addCardsMembersVotedByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsMembersVotedByIdCard 
  :: (Consumes AddCardsMembersVotedByIdCard contentType, MimeRender contentType CardsMembersVoted)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsMembersVoted -- ^ "body" -  Attributes of \"Cards Members Voted\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsMembersVotedByIdCard contentType NoContent MimeNoContent
addCardsMembersVotedByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/membersVoted"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsMembersVotedByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Members Voted\" to be added.
instance HasBodyParam AddCardsMembersVotedByIdCard CardsMembersVoted 

-- *** addCardsStickersByIdCard

-- | @POST \/cards\/{idCard}\/stickers@
-- 
-- addCardsStickersByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
addCardsStickersByIdCard 
  :: (Consumes AddCardsStickersByIdCard contentType, MimeRender contentType CardsStickers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsStickers -- ^ "body" -  Attributes of \"Cards Stickers\" to be added.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest AddCardsStickersByIdCard contentType NoContent MimeNoContent
addCardsStickersByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "POST" ["/cards/",toPath idCard,"/stickers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data AddCardsStickersByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Stickers\" to be added.
instance HasBodyParam AddCardsStickersByIdCard CardsStickers 

-- *** deleteCardsActionsCommentsByIdCardByIdAction

-- | @DELETE \/cards\/{idCard}\/actions\/{idAction}\/comments@
-- 
-- deleteCardsActionsCommentsByIdCardByIdAction()
-- 
-- This can only be done by the original author of the comment, or someone with higher permissions than the original author.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsActionsCommentsByIdCardByIdAction 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdAction -- ^ "idAction" -  idAction
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsActionsCommentsByIdCardByIdAction MimeNoContent NoContent MimeNoContent
deleteCardsActionsCommentsByIdCardByIdAction (IdCard idCard) (IdAction idAction) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/actions/",toPath idAction,"/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsActionsCommentsByIdCardByIdAction  

-- *** deleteCardsAttachmentsByIdCardByIdAttachment

-- | @DELETE \/cards\/{idCard}\/attachments\/{idAttachment}@
-- 
-- deleteCardsAttachmentsByIdCardByIdAttachment()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsAttachmentsByIdCardByIdAttachment 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdAttachment -- ^ "idAttachment" -  idAttachment
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsAttachmentsByIdCardByIdAttachment MimeNoContent NoContent MimeNoContent
deleteCardsAttachmentsByIdCardByIdAttachment (IdCard idCard) (IdAttachment idAttachment) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/attachments/",toPath idAttachment]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsAttachmentsByIdCardByIdAttachment  

-- *** deleteCardsByIdCard

-- | @DELETE \/cards\/{idCard}@
-- 
-- deleteCardsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsByIdCard MimeNoContent NoContent MimeNoContent
deleteCardsByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsByIdCard  

-- *** deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem

-- | @DELETE \/cards\/{idCard}\/checklist\/{idChecklist}\/checkItem\/{idCheckItem}@
-- 
-- deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> IdCheckItem -- ^ "idCheckItem" -  idCheckItem
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem MimeNoContent NoContent MimeNoContent
deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem (IdCard idCard) (IdChecklist idChecklist) (IdCheckItem idCheckItem) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/checklist/",toPath idChecklist,"/checkItem/",toPath idCheckItem]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem  

-- *** deleteCardsChecklistsByIdCardByIdChecklist

-- | @DELETE \/cards\/{idCard}\/checklists\/{idChecklist}@
-- 
-- deleteCardsChecklistsByIdCardByIdChecklist()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsChecklistsByIdCardByIdChecklist 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsChecklistsByIdCardByIdChecklist MimeNoContent NoContent MimeNoContent
deleteCardsChecklistsByIdCardByIdChecklist (IdCard idCard) (IdChecklist idChecklist) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/checklists/",toPath idChecklist]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsChecklistsByIdCardByIdChecklist  

-- *** deleteCardsIdLabelsByIdCardByIdLabel

-- | @DELETE \/cards\/{idCard}\/idLabels\/{idLabel}@
-- 
-- deleteCardsIdLabelsByIdCardByIdLabel()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsIdLabelsByIdCardByIdLabel 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdLabel -- ^ "idLabel" -  idLabel
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsIdLabelsByIdCardByIdLabel MimeNoContent NoContent MimeNoContent
deleteCardsIdLabelsByIdCardByIdLabel (IdCard idCard) (IdLabel idLabel) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/idLabels/",toPath idLabel]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsIdLabelsByIdCardByIdLabel  

-- *** deleteCardsIdMembersByIdCardByIdMember

-- | @DELETE \/cards\/{idCard}\/idMembers\/{idMember}@
-- 
-- deleteCardsIdMembersByIdCardByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsIdMembersByIdCardByIdMember 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsIdMembersByIdCardByIdMember MimeNoContent NoContent MimeNoContent
deleteCardsIdMembersByIdCardByIdMember (IdCard idCard) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/idMembers/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsIdMembersByIdCardByIdMember  

-- *** deleteCardsLabelsByIdCardByColor

-- | @DELETE \/cards\/{idCard}\/labels\/{color}@
-- 
-- deleteCardsLabelsByIdCardByColor()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsLabelsByIdCardByColor 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Color -- ^ "color" -  color
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsLabelsByIdCardByColor MimeNoContent NoContent MimeNoContent
deleteCardsLabelsByIdCardByColor (IdCard idCard) (Color color) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/labels/",toPath color]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsLabelsByIdCardByColor  

-- *** deleteCardsMembersVotedByIdCardByIdMember

-- | @DELETE \/cards\/{idCard}\/membersVoted\/{idMember}@
-- 
-- deleteCardsMembersVotedByIdCardByIdMember()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsMembersVotedByIdCardByIdMember 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdMember -- ^ "idMember" -  idMember
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsMembersVotedByIdCardByIdMember MimeNoContent NoContent MimeNoContent
deleteCardsMembersVotedByIdCardByIdMember (IdCard idCard) (IdMember idMember) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/membersVoted/",toPath idMember]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsMembersVotedByIdCardByIdMember  

-- *** deleteCardsStickersByIdCardByIdSticker

-- | @DELETE \/cards\/{idCard}\/stickers\/{idSticker}@
-- 
-- deleteCardsStickersByIdCardByIdSticker()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
deleteCardsStickersByIdCardByIdSticker 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdSticker -- ^ "idSticker" -  idSticker
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest DeleteCardsStickersByIdCardByIdSticker MimeNoContent NoContent MimeNoContent
deleteCardsStickersByIdCardByIdSticker (IdCard idCard) (IdSticker idSticker) (Key key) (Token token) =
  _mkRequest "DELETE" ["/cards/",toPath idCard,"/stickers/",toPath idSticker]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data DeleteCardsStickersByIdCardByIdSticker  

-- *** getCardsActionsByIdCard

-- | @GET \/cards\/{idCard}\/actions@
-- 
-- getCardsActionsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsActionsByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsActionsByIdCard MimeNoContent NoContent MimeNoContent
getCardsActionsByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/actions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsActionsByIdCard  

-- | /Optional Param/ "entities" -  true or false
instance HasOptionalParam GetCardsActionsByIdCard Entities where
  applyOptionalParam req (Entities xs) =
    req `setQuery` toQuery ("entities", Just xs)

-- | /Optional Param/ "display" -  true or false
instance HasOptionalParam GetCardsActionsByIdCard Display where
  applyOptionalParam req (Display xs) =
    req `setQuery` toQuery ("display", Just xs)

-- | /Optional Param/ "filter" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetCardsActionsByIdCard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetCardsActionsByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "limit" - a number from 0 to 1000
instance HasOptionalParam GetCardsActionsByIdCard Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "format" - One of: count, list or minimal
instance HasOptionalParam GetCardsActionsByIdCard Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)

-- | /Optional Param/ "since" - A date, null or lastView
instance HasOptionalParam GetCardsActionsByIdCard Since where
  applyOptionalParam req (Since xs) =
    req `setQuery` toQuery ("since", Just xs)

-- | /Optional Param/ "before" - A date, or null
instance HasOptionalParam GetCardsActionsByIdCard Before where
  applyOptionalParam req (Before xs) =
    req `setQuery` toQuery ("before", Just xs)

-- | /Optional Param/ "page" - Page * limit must be less than 1000
instance HasOptionalParam GetCardsActionsByIdCard Page where
  applyOptionalParam req (Page xs) =
    req `setQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "idModels" - Only return actions related to these model ids
instance HasOptionalParam GetCardsActionsByIdCard IdModels where
  applyOptionalParam req (IdModels xs) =
    req `setQuery` toQuery ("idModels", Just xs)

-- | /Optional Param/ "member" -  true or false
instance HasOptionalParam GetCardsActionsByIdCard Member where
  applyOptionalParam req (Member xs) =
    req `setQuery` toQuery ("member", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsActionsByIdCard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "memberCreator" -  true or false
instance HasOptionalParam GetCardsActionsByIdCard MemberCreator where
  applyOptionalParam req (MemberCreator xs) =
    req `setQuery` toQuery ("memberCreator", Just xs)

-- | /Optional Param/ "memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsActionsByIdCard MemberCreatorFields where
  applyOptionalParam req (MemberCreatorFields xs) =
    req `setQuery` toQuery ("memberCreator_fields", Just xs)

-- *** getCardsAttachmentsByIdCard

-- | @GET \/cards\/{idCard}\/attachments@
-- 
-- getCardsAttachmentsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsAttachmentsByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsAttachmentsByIdCard MimeNoContent NoContent MimeNoContent
getCardsAttachmentsByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/attachments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsAttachmentsByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetCardsAttachmentsByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- | /Optional Param/ "filter" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetCardsAttachmentsByIdCard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- *** getCardsAttachmentsByIdCardByIdAttachment

-- | @GET \/cards\/{idCard}\/attachments\/{idAttachment}@
-- 
-- getCardsAttachmentsByIdCardByIdAttachment()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsAttachmentsByIdCardByIdAttachment 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdAttachment -- ^ "idAttachment" -  idAttachment
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsAttachmentsByIdCardByIdAttachment MimeNoContent NoContent MimeNoContent
getCardsAttachmentsByIdCardByIdAttachment (IdCard idCard) (IdAttachment idAttachment) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/attachments/",toPath idAttachment]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsAttachmentsByIdCardByIdAttachment  

-- | /Optional Param/ "fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetCardsAttachmentsByIdCardByIdAttachment Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsBoardByIdCard

-- | @GET \/cards\/{idCard}\/board@
-- 
-- getCardsBoardByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsBoardByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsBoardByIdCard MimeNoContent NoContent MimeNoContent
getCardsBoardByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/board"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsBoardByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetCardsBoardByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsBoardByIdCardByField

-- | @GET \/cards\/{idCard}\/board\/{field}@
-- 
-- getCardsBoardByIdCardByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsBoardByIdCardByField 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsBoardByIdCardByField MimeNoContent NoContent MimeNoContent
getCardsBoardByIdCardByField (IdCard idCard) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/board/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsBoardByIdCardByField  

-- *** getCardsByIdCard

-- | @GET \/cards\/{idCard}@
-- 
-- getCardsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsByIdCard MimeNoContent NoContent MimeNoContent
getCardsByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsByIdCard  

-- | /Optional Param/ "actions" - all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization
instance HasOptionalParam GetCardsByIdCard Actions2 where
  applyOptionalParam req (Actions2 xs) =
    req `setQuery` toQuery ("actions", Just xs)

-- | /Optional Param/ "actions_entities" -  true or false
instance HasOptionalParam GetCardsByIdCard ActionsEntities where
  applyOptionalParam req (ActionsEntities xs) =
    req `setQuery` toQuery ("actions_entities", Just xs)

-- | /Optional Param/ "actions_display" -  true or false
instance HasOptionalParam GetCardsByIdCard ActionsDisplay where
  applyOptionalParam req (ActionsDisplay xs) =
    req `setQuery` toQuery ("actions_display", Just xs)

-- | /Optional Param/ "actions_limit" - a number from 0 to 1000
instance HasOptionalParam GetCardsByIdCard ActionsLimit where
  applyOptionalParam req (ActionsLimit xs) =
    req `setQuery` toQuery ("actions_limit", Just xs)

-- | /Optional Param/ "action_fields" - all or a comma-separated list of: data, date, idMemberCreator or type
instance HasOptionalParam GetCardsByIdCard ActionFields where
  applyOptionalParam req (ActionFields xs) =
    req `setQuery` toQuery ("action_fields", Just xs)

-- | /Optional Param/ "action_memberCreator_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsByIdCard ActionMemberCreatorFields where
  applyOptionalParam req (ActionMemberCreatorFields xs) =
    req `setQuery` toQuery ("action_memberCreator_fields", Just xs)

-- | /Optional Param/ "attachments" - A boolean value or &quot;cover&quot; for only card cover attachments
instance HasOptionalParam GetCardsByIdCard Attachments where
  applyOptionalParam req (Attachments xs) =
    req `setQuery` toQuery ("attachments", Just xs)

-- | /Optional Param/ "attachment_fields" - all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url
instance HasOptionalParam GetCardsByIdCard AttachmentFields where
  applyOptionalParam req (AttachmentFields xs) =
    req `setQuery` toQuery ("attachment_fields", Just xs)

-- | /Optional Param/ "members" -  true or false
instance HasOptionalParam GetCardsByIdCard Members2 where
  applyOptionalParam req (Members2 xs) =
    req `setQuery` toQuery ("members", Just xs)

-- | /Optional Param/ "member_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsByIdCard MemberFields where
  applyOptionalParam req (MemberFields xs) =
    req `setQuery` toQuery ("member_fields", Just xs)

-- | /Optional Param/ "membersVoted" -  true or false
instance HasOptionalParam GetCardsByIdCard MembersVoted where
  applyOptionalParam req (MembersVoted xs) =
    req `setQuery` toQuery ("membersVoted", Just xs)

-- | /Optional Param/ "memberVoted_fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsByIdCard MemberVotedFields where
  applyOptionalParam req (MemberVotedFields xs) =
    req `setQuery` toQuery ("memberVoted_fields", Just xs)

-- | /Optional Param/ "checkItemStates" -  true or false
instance HasOptionalParam GetCardsByIdCard CheckItemStates where
  applyOptionalParam req (CheckItemStates xs) =
    req `setQuery` toQuery ("checkItemStates", Just xs)

-- | /Optional Param/ "checkItemState_fields" - all or a comma-separated list of: idCheckItem or state
instance HasOptionalParam GetCardsByIdCard CheckItemStateFields where
  applyOptionalParam req (CheckItemStateFields xs) =
    req `setQuery` toQuery ("checkItemState_fields", Just xs)

-- | /Optional Param/ "checklists" - One of: all or none
instance HasOptionalParam GetCardsByIdCard Checklists2 where
  applyOptionalParam req (Checklists2 xs) =
    req `setQuery` toQuery ("checklists", Just xs)

-- | /Optional Param/ "checklist_fields" - all or a comma-separated list of: idBoard, idCard, name or pos
instance HasOptionalParam GetCardsByIdCard ChecklistFields where
  applyOptionalParam req (ChecklistFields xs) =
    req `setQuery` toQuery ("checklist_fields", Just xs)

-- | /Optional Param/ "board" -  true or false
instance HasOptionalParam GetCardsByIdCard Board where
  applyOptionalParam req (Board xs) =
    req `setQuery` toQuery ("board", Just xs)

-- | /Optional Param/ "board_fields" - all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url
instance HasOptionalParam GetCardsByIdCard BoardFields where
  applyOptionalParam req (BoardFields xs) =
    req `setQuery` toQuery ("board_fields", Just xs)

-- | /Optional Param/ "list" -  true or false
instance HasOptionalParam GetCardsByIdCard ParamList where
  applyOptionalParam req (ParamList xs) =
    req `setQuery` toQuery ("list", Just xs)

-- | /Optional Param/ "list_fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetCardsByIdCard ListFields where
  applyOptionalParam req (ListFields xs) =
    req `setQuery` toQuery ("list_fields", Just xs)

-- | /Optional Param/ "stickers" -  true or false
instance HasOptionalParam GetCardsByIdCard Stickers where
  applyOptionalParam req (Stickers xs) =
    req `setQuery` toQuery ("stickers", Just xs)

-- | /Optional Param/ "sticker_fields" - all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
instance HasOptionalParam GetCardsByIdCard StickerFields where
  applyOptionalParam req (StickerFields xs) =
    req `setQuery` toQuery ("sticker_fields", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetCardsByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsByIdCardByField

-- | @GET \/cards\/{idCard}\/{field}@
-- 
-- getCardsByIdCardByField()
-- 
getCardsByIdCardByField 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsByIdCardByField MimeNoContent NoContent MimeNoContent
getCardsByIdCardByField (IdCard idCard) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/",toPath field]
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsByIdCardByField  

-- *** getCardsCheckItemStatesByIdCard

-- | @GET \/cards\/{idCard}\/checkItemStates@
-- 
-- getCardsCheckItemStatesByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsCheckItemStatesByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsCheckItemStatesByIdCard MimeNoContent NoContent MimeNoContent
getCardsCheckItemStatesByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/checkItemStates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsCheckItemStatesByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: idCheckItem or state
instance HasOptionalParam GetCardsCheckItemStatesByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsChecklistsByIdCard

-- | @GET \/cards\/{idCard}\/checklists@
-- 
-- getCardsChecklistsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsChecklistsByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsChecklistsByIdCard MimeNoContent NoContent MimeNoContent
getCardsChecklistsByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/checklists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsChecklistsByIdCard  

-- | /Optional Param/ "cards" - One of: all, closed, none, open or visible
instance HasOptionalParam GetCardsChecklistsByIdCard Cards2 where
  applyOptionalParam req (Cards2 xs) =
    req `setQuery` toQuery ("cards", Just xs)

-- | /Optional Param/ "card_fields" - all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url
instance HasOptionalParam GetCardsChecklistsByIdCard CardFields where
  applyOptionalParam req (CardFields xs) =
    req `setQuery` toQuery ("card_fields", Just xs)

-- | /Optional Param/ "checkItems" - One of: all or none
instance HasOptionalParam GetCardsChecklistsByIdCard CheckItems where
  applyOptionalParam req (CheckItems xs) =
    req `setQuery` toQuery ("checkItems", Just xs)

-- | /Optional Param/ "checkItem_fields" - all or a comma-separated list of: name, nameData, pos, state or type
instance HasOptionalParam GetCardsChecklistsByIdCard CheckItemFields where
  applyOptionalParam req (CheckItemFields xs) =
    req `setQuery` toQuery ("checkItem_fields", Just xs)

-- | /Optional Param/ "filter" - One of: all or none
instance HasOptionalParam GetCardsChecklistsByIdCard Filter where
  applyOptionalParam req (Filter xs) =
    req `setQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "fields" - all or a comma-separated list of: idBoard, idCard, name or pos
instance HasOptionalParam GetCardsChecklistsByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsListByIdCard

-- | @GET \/cards\/{idCard}\/list@
-- 
-- getCardsListByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsListByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsListByIdCard MimeNoContent NoContent MimeNoContent
getCardsListByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsListByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: closed, idBoard, name, pos or subscribed
instance HasOptionalParam GetCardsListByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsListByIdCardByField

-- | @GET \/cards\/{idCard}\/list\/{field}@
-- 
-- getCardsListByIdCardByField()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsListByIdCardByField 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Field -- ^ "field" -  field
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsListByIdCardByField MimeNoContent NoContent MimeNoContent
getCardsListByIdCardByField (IdCard idCard) (Field field) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/list/",toPath field]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsListByIdCardByField  

-- *** getCardsMembersByIdCard

-- | @GET \/cards\/{idCard}\/members@
-- 
-- getCardsMembersByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsMembersByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsMembersByIdCard MimeNoContent NoContent MimeNoContent
getCardsMembersByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsMembersByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsMembersByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsMembersVotedByIdCard

-- | @GET \/cards\/{idCard}\/membersVoted@
-- 
-- getCardsMembersVotedByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsMembersVotedByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsMembersVotedByIdCard MimeNoContent NoContent MimeNoContent
getCardsMembersVotedByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/membersVoted"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsMembersVotedByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
instance HasOptionalParam GetCardsMembersVotedByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsStickersByIdCard

-- | @GET \/cards\/{idCard}\/stickers@
-- 
-- getCardsStickersByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsStickersByIdCard 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsStickersByIdCard MimeNoContent NoContent MimeNoContent
getCardsStickersByIdCard (IdCard idCard) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/stickers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsStickersByIdCard  

-- | /Optional Param/ "fields" - all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
instance HasOptionalParam GetCardsStickersByIdCard Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** getCardsStickersByIdCardByIdSticker

-- | @GET \/cards\/{idCard}\/stickers\/{idSticker}@
-- 
-- getCardsStickersByIdCardByIdSticker()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
getCardsStickersByIdCardByIdSticker 
  :: IdCard -- ^ "idCard" -  card id or shortlink
  -> IdSticker -- ^ "idSticker" -  idSticker
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest GetCardsStickersByIdCardByIdSticker MimeNoContent NoContent MimeNoContent
getCardsStickersByIdCardByIdSticker (IdCard idCard) (IdSticker idSticker) (Key key) (Token token) =
  _mkRequest "GET" ["/cards/",toPath idCard,"/stickers/",toPath idSticker]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data GetCardsStickersByIdCardByIdSticker  

-- | /Optional Param/ "fields" - all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex
instance HasOptionalParam GetCardsStickersByIdCardByIdSticker Fields where
  applyOptionalParam req (Fields xs) =
    req `setQuery` toQuery ("fields", Just xs)

-- *** updateCardsActionsCommentsByIdCardByIdAction

-- | @PUT \/cards\/{idCard}\/actions\/{idAction}\/comments@
-- 
-- updateCardsActionsCommentsByIdCardByIdAction()
-- 
-- This can only be done by the original author of the comment.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsActionsCommentsByIdCardByIdAction 
  :: (Consumes UpdateCardsActionsCommentsByIdCardByIdAction contentType, MimeRender contentType CardsActionsComments)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdAction -- ^ "idAction" -  idAction
  -> CardsActionsComments -- ^ "body" -  Attributes of \"Cards Actions Comments\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsActionsCommentsByIdCardByIdAction contentType NoContent MimeNoContent
updateCardsActionsCommentsByIdCardByIdAction _ (IdCard idCard) (IdAction idAction) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/actions/",toPath idAction,"/comments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsActionsCommentsByIdCardByIdAction 

-- | /Body Param/ "body" - Attributes of \"Cards Actions Comments\" to be updated.
instance HasBodyParam UpdateCardsActionsCommentsByIdCardByIdAction CardsActionsComments 

-- *** updateCardsByIdCard

-- | @PUT \/cards\/{idCard}@
-- 
-- updateCardsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsByIdCard 
  :: (Consumes UpdateCardsByIdCard contentType, MimeRender contentType Cards)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> Cards -- ^ "body" -  Attributes of \"Cards\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsByIdCard contentType NoContent MimeNoContent
updateCardsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards\" to be updated.
instance HasBodyParam UpdateCardsByIdCard Cards 

-- *** updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem

-- | @PUT \/cards\/{idCard}\/checklist\/{idChecklistCurrent}\/checkItem\/{idCheckItem}@
-- 
-- updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem 
  :: (Consumes UpdateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem contentType, MimeRender contentType CardsChecklistIdChecklistCurrentCheckItem)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklistCurrent -- ^ "idChecklistCurrent" -  idChecklistCurrent
  -> IdCheckItem -- ^ "idCheckItem" -  idCheckItem
  -> CardsChecklistIdChecklistCurrentCheckItem -- ^ "body" -  Attributes of \"Cards Checklist Id Checklist Current Check Item\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem contentType NoContent MimeNoContent
updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem _ (IdCard idCard) (IdChecklistCurrent idChecklistCurrent) (IdCheckItem idCheckItem) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/checklist/",toPath idChecklistCurrent,"/checkItem/",toPath idCheckItem]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem 

-- | /Body Param/ "body" - Attributes of \"Cards Checklist Id Checklist Current Check Item\" to be updated.
instance HasBodyParam UpdateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem CardsChecklistIdChecklistCurrentCheckItem 

-- *** updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem

-- | @PUT \/cards\/{idCard}\/checklist\/{idChecklist}\/checkItem\/{idCheckItem}\/name@
-- 
-- updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem 
  :: (Consumes UpdateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem contentType, MimeRender contentType CardsChecklistCheckItemName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> IdCheckItem -- ^ "idCheckItem" -  idCheckItem
  -> CardsChecklistCheckItemName -- ^ "body" -  Attributes of \"Cards Checklist Check Item Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem contentType NoContent MimeNoContent
updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem _ (IdCard idCard) (IdChecklist idChecklist) (IdCheckItem idCheckItem) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/checklist/",toPath idChecklist,"/checkItem/",toPath idCheckItem,"/name"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem 

-- | /Body Param/ "body" - Attributes of \"Cards Checklist Check Item Name\" to be updated.
instance HasBodyParam UpdateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem CardsChecklistCheckItemName 

-- *** updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem

-- | @PUT \/cards\/{idCard}\/checklist\/{idChecklist}\/checkItem\/{idCheckItem}\/pos@
-- 
-- updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem 
  :: (Consumes UpdateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem contentType, MimeRender contentType CardsChecklistCheckItemPos)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> IdCheckItem -- ^ "idCheckItem" -  idCheckItem
  -> CardsChecklistCheckItemPos -- ^ "body" -  Attributes of \"Cards Checklist Check Item Pos\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem contentType NoContent MimeNoContent
updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem _ (IdCard idCard) (IdChecklist idChecklist) (IdCheckItem idCheckItem) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/checklist/",toPath idChecklist,"/checkItem/",toPath idCheckItem,"/pos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem 

-- | /Body Param/ "body" - Attributes of \"Cards Checklist Check Item Pos\" to be updated.
instance HasBodyParam UpdateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem CardsChecklistCheckItemPos 

-- *** updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem

-- | @PUT \/cards\/{idCard}\/checklist\/{idChecklist}\/checkItem\/{idCheckItem}\/state@
-- 
-- updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem 
  :: (Consumes UpdateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem contentType, MimeRender contentType CardsChecklistCheckItemState)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdChecklist -- ^ "idChecklist" -  idChecklist
  -> IdCheckItem -- ^ "idCheckItem" -  idCheckItem
  -> CardsChecklistCheckItemState -- ^ "body" -  Attributes of \"Cards Checklist Check Item State\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem contentType NoContent MimeNoContent
updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem _ (IdCard idCard) (IdChecklist idChecklist) (IdCheckItem idCheckItem) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/checklist/",toPath idChecklist,"/checkItem/",toPath idCheckItem,"/state"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem 

-- | /Body Param/ "body" - Attributes of \"Cards Checklist Check Item State\" to be updated.
instance HasBodyParam UpdateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem CardsChecklistCheckItemState 

-- *** updateCardsClosedByIdCard

-- | @PUT \/cards\/{idCard}\/closed@
-- 
-- updateCardsClosedByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsClosedByIdCard 
  :: (Consumes UpdateCardsClosedByIdCard contentType, MimeRender contentType CardsClosed)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsClosed -- ^ "body" -  Attributes of \"Cards Closed\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsClosedByIdCard contentType NoContent MimeNoContent
updateCardsClosedByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/closed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsClosedByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Closed\" to be updated.
instance HasBodyParam UpdateCardsClosedByIdCard CardsClosed 

-- *** updateCardsDescByIdCard

-- | @PUT \/cards\/{idCard}\/desc@
-- 
-- updateCardsDescByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsDescByIdCard 
  :: (Consumes UpdateCardsDescByIdCard contentType, MimeRender contentType CardsDesc)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsDesc -- ^ "body" -  Attributes of \"Cards Desc\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsDescByIdCard contentType NoContent MimeNoContent
updateCardsDescByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/desc"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsDescByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Desc\" to be updated.
instance HasBodyParam UpdateCardsDescByIdCard CardsDesc 

-- *** updateCardsDueByIdCard

-- | @PUT \/cards\/{idCard}\/due@
-- 
-- updateCardsDueByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsDueByIdCard 
  :: (Consumes UpdateCardsDueByIdCard contentType, MimeRender contentType CardsDue)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsDue -- ^ "body" -  Attributes of \"Cards Due\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsDueByIdCard contentType NoContent MimeNoContent
updateCardsDueByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/due"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsDueByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Due\" to be updated.
instance HasBodyParam UpdateCardsDueByIdCard CardsDue 

-- *** updateCardsIdAttachmentCoverByIdCard

-- | @PUT \/cards\/{idCard}\/idAttachmentCover@
-- 
-- updateCardsIdAttachmentCoverByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsIdAttachmentCoverByIdCard 
  :: (Consumes UpdateCardsIdAttachmentCoverByIdCard contentType, MimeRender contentType CardsIdAttachmentCover)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsIdAttachmentCover -- ^ "body" -  Attributes of \"Cards Id Attachment Cover\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsIdAttachmentCoverByIdCard contentType NoContent MimeNoContent
updateCardsIdAttachmentCoverByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/idAttachmentCover"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsIdAttachmentCoverByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Id Attachment Cover\" to be updated.
instance HasBodyParam UpdateCardsIdAttachmentCoverByIdCard CardsIdAttachmentCover 

-- *** updateCardsIdBoardByIdCard

-- | @PUT \/cards\/{idCard}\/idBoard@
-- 
-- updateCardsIdBoardByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsIdBoardByIdCard 
  :: (Consumes UpdateCardsIdBoardByIdCard contentType, MimeRender contentType CardsIdBoard)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsIdBoard -- ^ "body" -  Attributes of \"Cards Id Board\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsIdBoardByIdCard contentType NoContent MimeNoContent
updateCardsIdBoardByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/idBoard"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsIdBoardByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Id Board\" to be updated.
instance HasBodyParam UpdateCardsIdBoardByIdCard CardsIdBoard 

-- *** updateCardsIdListByIdCard

-- | @PUT \/cards\/{idCard}\/idList@
-- 
-- updateCardsIdListByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsIdListByIdCard 
  :: (Consumes UpdateCardsIdListByIdCard contentType, MimeRender contentType CardsIdList)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsIdList -- ^ "body" -  Attributes of \"Cards Id List\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsIdListByIdCard contentType NoContent MimeNoContent
updateCardsIdListByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/idList"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsIdListByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Id List\" to be updated.
instance HasBodyParam UpdateCardsIdListByIdCard CardsIdList 

-- *** updateCardsIdMembersByIdCard

-- | @PUT \/cards\/{idCard}\/idMembers@
-- 
-- updateCardsIdMembersByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsIdMembersByIdCard 
  :: (Consumes UpdateCardsIdMembersByIdCard contentType, MimeRender contentType CardsIdMembers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsIdMembers -- ^ "body" -  Attributes of \"Cards Id Members\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsIdMembersByIdCard contentType NoContent MimeNoContent
updateCardsIdMembersByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/idMembers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsIdMembersByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Id Members\" to be updated.
instance HasBodyParam UpdateCardsIdMembersByIdCard CardsIdMembers 

-- *** updateCardsLabelsByIdCard

-- | @PUT \/cards\/{idCard}\/labels@
-- 
-- updateCardsLabelsByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsLabelsByIdCard 
  :: (Consumes UpdateCardsLabelsByIdCard contentType, MimeRender contentType CardsLabels)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsLabels -- ^ "body" -  Attributes of \"Cards Labels\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsLabelsByIdCard contentType NoContent MimeNoContent
updateCardsLabelsByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/labels"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsLabelsByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Labels\" to be updated.
instance HasBodyParam UpdateCardsLabelsByIdCard CardsLabels 

-- *** updateCardsNameByIdCard

-- | @PUT \/cards\/{idCard}\/name@
-- 
-- updateCardsNameByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsNameByIdCard 
  :: (Consumes UpdateCardsNameByIdCard contentType, MimeRender contentType CardsName)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsName -- ^ "body" -  Attributes of \"Cards Name\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsNameByIdCard contentType NoContent MimeNoContent
updateCardsNameByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/name"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsNameByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Name\" to be updated.
instance HasBodyParam UpdateCardsNameByIdCard CardsName 

-- *** updateCardsPosByIdCard

-- | @PUT \/cards\/{idCard}\/pos@
-- 
-- updateCardsPosByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsPosByIdCard 
  :: (Consumes UpdateCardsPosByIdCard contentType, MimeRender contentType CardsPos)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsPos -- ^ "body" -  Attributes of \"Cards Pos\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsPosByIdCard contentType NoContent MimeNoContent
updateCardsPosByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/pos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsPosByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Pos\" to be updated.
instance HasBodyParam UpdateCardsPosByIdCard CardsPos 

-- *** updateCardsStickersByIdCardByIdSticker

-- | @PUT \/cards\/{idCard}\/stickers\/{idSticker}@
-- 
-- updateCardsStickersByIdCardByIdSticker()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsStickersByIdCardByIdSticker 
  :: (Consumes UpdateCardsStickersByIdCardByIdSticker contentType, MimeRender contentType CardsStickers)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> IdSticker -- ^ "idSticker" -  idSticker
  -> CardsStickers -- ^ "body" -  Attributes of \"Cards Stickers\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsStickersByIdCardByIdSticker contentType NoContent MimeNoContent
updateCardsStickersByIdCardByIdSticker _ (IdCard idCard) (IdSticker idSticker) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/stickers/",toPath idSticker]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsStickersByIdCardByIdSticker 

-- | /Body Param/ "body" - Attributes of \"Cards Stickers\" to be updated.
instance HasBodyParam UpdateCardsStickersByIdCardByIdSticker CardsStickers 

-- *** updateCardsSubscribedByIdCard

-- | @PUT \/cards\/{idCard}\/subscribed@
-- 
-- updateCardsSubscribedByIdCard()
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyApiToken'
-- 
updateCardsSubscribedByIdCard 
  :: (Consumes UpdateCardsSubscribedByIdCard contentType, MimeRender contentType CardsSubscribed)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> IdCard -- ^ "idCard" -  card id or shortlink
  -> CardsSubscribed -- ^ "body" -  Attributes of \"Cards Subscribed\" to be updated.
  -> Key -- ^ "key" -  <a href=\"https://trello.com/1/appKey/generate\"  target=\"_blank\">Generate your application key</a>
  -> Token -- ^ "token" -  <a href=\"https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user\"  target=\"_blank\">Getting a token from a user</a>
  -> TrelloRequest UpdateCardsSubscribedByIdCard contentType NoContent MimeNoContent
updateCardsSubscribedByIdCard _ (IdCard idCard) body (Key key) (Token token) =
  _mkRequest "PUT" ["/cards/",toPath idCard,"/subscribed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiToken)
    `setBodyParam` body
    `setQuery` toQuery ("key", Just key)
    `setQuery` toQuery ("token", Just token)

data UpdateCardsSubscribedByIdCard 

-- | /Body Param/ "body" - Attributes of \"Cards Subscribed\" to be updated.
instance HasBodyParam UpdateCardsSubscribedByIdCard CardsSubscribed 
